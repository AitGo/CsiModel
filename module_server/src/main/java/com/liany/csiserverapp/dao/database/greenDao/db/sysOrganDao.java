package com.liany.csiserverapp.dao.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liany.csiserverapp.diagnose.sysOrgan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORGANIZATION".
*/
public class sysOrganDao extends AbstractDao<sysOrgan, String> {

    public static final String TABLENAME = "ORGANIZATION";

    /**
     * Properties of entity sysOrgan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ParentId = new Property(1, String.class, "parentId", false, "parentId");
        public final static Property UnitName = new Property(2, String.class, "unitName", false, "unitName");
        public final static Property ShortName = new Property(3, String.class, "shortName", false, "shortName");
        public final static Property UnitCode = new Property(4, String.class, "unitCode", false, "unitCode");
    }


    public sysOrganDao(DaoConfig config) {
        super(config);
    }
    
    public sysOrganDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORGANIZATION\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"parentId\" TEXT," + // 1: parentId
                "\"unitName\" TEXT," + // 2: unitName
                "\"shortName\" TEXT," + // 3: shortName
                "\"unitCode\" TEXT);"); // 4: unitCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORGANIZATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, sysOrgan entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(2, parentId);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(3, unitName);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(4, shortName);
        }
 
        String unitCode = entity.getUnitCode();
        if (unitCode != null) {
            stmt.bindString(5, unitCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, sysOrgan entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(2, parentId);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(3, unitName);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(4, shortName);
        }
 
        String unitCode = entity.getUnitCode();
        if (unitCode != null) {
            stmt.bindString(5, unitCode);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public sysOrgan readEntity(Cursor cursor, int offset) {
        sysOrgan entity = new sysOrgan( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // parentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // unitName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shortName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // unitCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, sysOrgan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setParentId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUnitName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(sysOrgan entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(sysOrgan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(sysOrgan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
