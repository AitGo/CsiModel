package com.liany.csiserverapp.dao.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liany.csiserverapp.diagnose.sysTechnician;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TECHNICIAN".
*/
public class sysTechnicianDao extends AbstractDao<sysTechnician, String> {

    public static final String TABLENAME = "TECHNICIAN";

    /**
     * Properties of entity sysTechnician.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property OrganId = new Property(1, String.class, "organId", false, "organId");
        public final static Property IdCardNo = new Property(2, String.class, "idCardNo", false, "idCardNo");
        public final static Property Contact = new Property(3, String.class, "contact", false, "contact");
        public final static Property Duty = new Property(4, String.class, "duty", false, "duty");
    }


    public sysTechnicianDao(DaoConfig config) {
        super(config);
    }
    
    public sysTechnicianDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TECHNICIAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"organId\" TEXT," + // 1: organId
                "\"idCardNo\" TEXT," + // 2: idCardNo
                "\"contact\" TEXT," + // 3: contact
                "\"duty\" TEXT);"); // 4: duty
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TECHNICIAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, sysTechnician entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String organId = entity.getOrganId();
        if (organId != null) {
            stmt.bindString(2, organId);
        }
 
        String idCardNo = entity.getIdCardNo();
        if (idCardNo != null) {
            stmt.bindString(3, idCardNo);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(4, contact);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(5, duty);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, sysTechnician entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String organId = entity.getOrganId();
        if (organId != null) {
            stmt.bindString(2, organId);
        }
 
        String idCardNo = entity.getIdCardNo();
        if (idCardNo != null) {
            stmt.bindString(3, idCardNo);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(4, contact);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(5, duty);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public sysTechnician readEntity(Cursor cursor, int offset) {
        sysTechnician entity = new sysTechnician( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // organId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idCardNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contact
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // duty
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, sysTechnician entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrganId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdCardNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContact(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDuty(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(sysTechnician entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(sysTechnician entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(sysTechnician entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
