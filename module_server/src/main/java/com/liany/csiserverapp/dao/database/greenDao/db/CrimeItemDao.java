package com.liany.csiserverapp.dao.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liany.csiserverapp.diagnose.converter.StringConverter;
import java.util.List;

import com.liany.csiserverapp.diagnose.CrimeItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "crime".
*/
public class CrimeItemDao extends AbstractDao<CrimeItem, String> {

    public static final String TABLENAME = "crime";

    /**
     * Properties of entity CrimeItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property SceneId = new Property(1, String.class, "sceneId", false, "SCENE_ID");
        public final static Property SceneNo = new Property(2, String.class, "sceneNo", false, "SCENE_NO");
        public final static Property CaseId = new Property(3, String.class, "caseId", false, "CASE_ID");
        public final static Property ReceptionId = new Property(4, String.class, "receptionId", false, "RECEPTION_ID");
        public final static Property IsUpload = new Property(5, String.class, "isUpload", false, "IS_UPLOAD");
        public final static Property LoginName = new Property(6, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property UserName = new Property(7, String.class, "userName", false, "USER_NAME");
        public final static Property UnitCode = new Property(8, String.class, "unitCode", false, "UNIT_CODE");
        public final static Property CreateTime = new Property(9, long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(10, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Complete = new Property(11, String.class, "complete", false, "COMPLETE");
        public final static Property IsCollecting = new Property(12, Boolean.class, "isCollecting", false, "IS_COLLECTING");
        public final static Property IsCollected = new Property(13, Boolean.class, "isCollected", false, "IS_COLLECTED");
        public final static Property CellResult = new Property(14, String.class, "cellResult", false, "CELL_RESULT");
        public final static Property GpsLat = new Property(15, double.class, "gpsLat", false, "GPS_LAT");
        public final static Property GpsLon = new Property(16, double.class, "gpsLon", false, "GPS_LON");
        public final static Property GetLastData = new Property(17, Boolean.class, "getLastData", false, "GET_LAST_DATA");
        public final static Property Casetype = new Property(18, String.class, "casetype", false, "CASETYPE");
        public final static Property CasetypeKey = new Property(19, String.class, "casetypeKey", false, "CASETYPE_KEY");
        public final static Property Location = new Property(20, String.class, "location", false, "LOCATION");
        public final static Property AccessInspectors = new Property(21, String.class, "accessInspectors", false, "ACCESS_INSPECTORS");
        public final static Property AccessInspectorsKey = new Property(22, String.class, "accessInspectorsKey", false, "ACCESS_INSPECTORS_KEY");
        public final static Property AccessReason = new Property(23, String.class, "accessReason", false, "ACCESS_REASON");
        public final static Property CaseOccurProcess = new Property(24, String.class, "caseOccurProcess", false, "CASE_OCCUR_PROCESS");
        public final static Property WeatherCondition = new Property(25, String.class, "weatherCondition", false, "WEATHER_CONDITION");
        public final static Property WeatherConditionKey = new Property(26, String.class, "weatherConditionKey", false, "WEATHER_CONDITION_KEY");
        public final static Property WindDirection = new Property(27, String.class, "windDirection", false, "WIND_DIRECTION");
        public final static Property WindDirectionKey = new Property(28, String.class, "windDirectionKey", false, "WIND_DIRECTION_KEY");
        public final static Property Temperature = new Property(29, String.class, "temperature", false, "TEMPERATURE");
        public final static Property Humidity = new Property(30, String.class, "humidity", false, "HUMIDITY");
        public final static Property Area = new Property(31, String.class, "area", false, "AREA");
        public final static Property AreaKey = new Property(32, String.class, "areaKey", false, "AREA_KEY");
        public final static Property Occurred_start_time = new Property(33, long.class, "occurred_start_time", false, "OCCURRED_START_TIME");
        public final static Property Occurred_end_time = new Property(34, long.class, "occurred_end_time", false, "OCCURRED_END_TIME");
        public final static Property Get_access_time = new Property(35, long.class, "get_access_time", false, "GET_ACCESS_TIME");
        public final static Property UnitsAssigned = new Property(36, String.class, "unitsAssigned", false, "UNITS_ASSIGNED");
        public final static Property AccessPolicemen = new Property(37, String.class, "accessPolicemen", false, "ACCESS_POLICEMEN");
        public final static Property Access_start_time = new Property(38, long.class, "access_start_time", false, "ACCESS_START_TIME");
        public final static Property Access_end_time = new Property(39, long.class, "access_end_time", false, "ACCESS_END_TIME");
        public final static Property AccessLocation = new Property(40, String.class, "accessLocation", false, "ACCESS_LOCATION");
        public final static Property SceneCondition = new Property(41, String.class, "sceneCondition", false, "SCENE_CONDITION");
        public final static Property SceneConditionKey = new Property(42, String.class, "sceneConditionKey", false, "SCENE_CONDITION_KEY");
        public final static Property ChangeOption = new Property(43, String.class, "changeOption", false, "CHANGE_OPTION");
        public final static Property ChangeOptionKey = new Property(44, String.class, "changeOptionKey", false, "CHANGE_OPTION_KEY");
        public final static Property ChangeReason = new Property(45, String.class, "changeReason", false, "CHANGE_REASON");
        public final static Property IlluminationCondition = new Property(46, String.class, "illuminationCondition", false, "ILLUMINATION_CONDITION");
        public final static Property IlluminationConditionKey = new Property(47, String.class, "illuminationConditionKey", false, "ILLUMINATION_CONDITION_KEY");
        public final static Property ProductPeopleName = new Property(48, String.class, "productPeopleName", false, "PRODUCT_PEOPLE_NAME");
        public final static Property ProductPeopleUnit = new Property(49, String.class, "productPeopleUnit", false, "PRODUCT_PEOPLE_UNIT");
        public final static Property ProductPeopleDuties = new Property(50, String.class, "productPeopleDuties", false, "PRODUCT_PEOPLE_DUTIES");
        public final static Property Safeguard = new Property(51, String.class, "safeguard", false, "SAFEGUARD");
        public final static Property SceneConductor = new Property(52, String.class, "sceneConductor", false, "SCENE_CONDUCTOR");
        public final static Property SceneConductorKey = new Property(53, String.class, "sceneConductorKey", false, "SCENE_CONDUCTOR_KEY");
        public final static Property Overview = new Property(54, String.class, "overview", false, "OVERVIEW");
        public final static Property OverviewId = new Property(55, String.class, "overviewId", false, "OVERVIEW_ID");
        public final static Property OpinionId = new Property(56, String.class, "opinionId", false, "OPINION_ID");
        public final static Property OpinionResultId = new Property(57, String.class, "opinionResultId", false, "OPINION_RESULT_ID");
        public final static Property CrimePeopleNumber = new Property(58, String.class, "crimePeopleNumber", false, "CRIME_PEOPLE_NUMBER");
        public final static Property CrimePeopleNumberKey = new Property(59, String.class, "crimePeopleNumberKey", false, "CRIME_PEOPLE_NUMBER_KEY");
        public final static Property CrimePeopleNumberDesc = new Property(60, String.class, "crimePeopleNumberDesc", false, "CRIME_PEOPLE_NUMBER_DESC");
        public final static Property CrimeMeans = new Property(61, String.class, "crimeMeans", false, "CRIME_MEANS");
        public final static Property CrimeMeansKey = new Property(62, String.class, "crimeMeansKey", false, "CRIME_MEANS_KEY");
        public final static Property CrimeMeansDesc = new Property(63, String.class, "crimeMeansDesc", false, "CRIME_MEANS_DESC");
        public final static Property CrimeCharacter = new Property(64, String.class, "crimeCharacter", false, "CRIME_CHARACTER");
        public final static Property CrimeCharacterKey = new Property(65, String.class, "crimeCharacterKey", false, "CRIME_CHARACTER_KEY");
        public final static Property CrimeCharacterDesc = new Property(66, String.class, "crimeCharacterDesc", false, "CRIME_CHARACTER_DESC");
        public final static Property CrimeEntrance = new Property(67, String.class, "crimeEntrance", false, "CRIME_ENTRANCE");
        public final static Property CrimeEntranceKey = new Property(68, String.class, "crimeEntranceKey", false, "CRIME_ENTRANCE_KEY");
        public final static Property CrimeEntranceDesc = new Property(69, String.class, "crimeEntranceDesc", false, "CRIME_ENTRANCE_DESC");
        public final static Property CrimeTiming = new Property(70, String.class, "crimeTiming", false, "CRIME_TIMING");
        public final static Property CrimeTimingKey = new Property(71, String.class, "crimeTimingKey", false, "CRIME_TIMING_KEY");
        public final static Property CrimeTimingDesc = new Property(72, String.class, "crimeTimingDesc", false, "CRIME_TIMING_DESC");
        public final static Property SelectObject = new Property(73, String.class, "selectObject", false, "SELECT_OBJECT");
        public final static Property SelectObjectKey = new Property(74, String.class, "selectObjectKey", false, "SELECT_OBJECT_KEY");
        public final static Property SelectObjectDesc = new Property(75, String.class, "selectObjectDesc", false, "SELECT_OBJECT_DESC");
        public final static Property CrimeExport = new Property(76, String.class, "crimeExport", false, "CRIME_EXPORT");
        public final static Property CrimeExportKey = new Property(77, String.class, "crimeExportKey", false, "CRIME_EXPORT_KEY");
        public final static Property CrimeExportDesc = new Property(78, String.class, "crimeExportDesc", false, "CRIME_EXPORT_DESC");
        public final static Property CrimePeopleFeature = new Property(79, String.class, "crimePeopleFeature", false, "CRIME_PEOPLE_FEATURE");
        public final static Property CrimePeopleFeatureKey = new Property(80, String.class, "crimePeopleFeatureKey", false, "CRIME_PEOPLE_FEATURE_KEY");
        public final static Property CrimePeopleFeatureDesc = new Property(81, String.class, "crimePeopleFeatureDesc", false, "CRIME_PEOPLE_FEATURE_DESC");
        public final static Property CrimeFeature = new Property(82, String.class, "crimeFeature", false, "CRIME_FEATURE");
        public final static Property CrimeFeatureKey = new Property(83, String.class, "crimeFeatureKey", false, "CRIME_FEATURE_KEY");
        public final static Property CrimeFeatureDesc = new Property(84, String.class, "crimeFeatureDesc", false, "CRIME_FEATURE_DESC");
        public final static Property IntrusiveMethod = new Property(85, String.class, "intrusiveMethod", false, "INTRUSIVE_METHOD");
        public final static Property IntrusiveMethodKey = new Property(86, String.class, "intrusiveMethodKey", false, "INTRUSIVE_METHOD_KEY");
        public final static Property IntrusiveMethodDesc = new Property(87, String.class, "intrusiveMethodDesc", false, "INTRUSIVE_METHOD_DESC");
        public final static Property SelectLocation = new Property(88, String.class, "selectLocation", false, "SELECT_LOCATION");
        public final static Property SelectLocationKey = new Property(89, String.class, "selectLocationKey", false, "SELECT_LOCATION_KEY");
        public final static Property SelectLocationDesc = new Property(90, String.class, "selectLocationDesc", false, "SELECT_LOCATION_DESC");
        public final static Property CrimePurpose = new Property(91, String.class, "crimePurpose", false, "CRIME_PURPOSE");
        public final static Property CrimePurposeKey = new Property(92, String.class, "crimePurposeKey", false, "CRIME_PURPOSE_KEY");
        public final static Property CrimePurposeDesc = new Property(93, String.class, "crimePurposeDesc", false, "CRIME_PURPOSE_DESC");
        public final static Property Rev1 = new Property(94, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(95, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(96, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(97, String.class, "rev4", false, "REV4");
    }

    private DaoSession daoSession;

    private final StringConverter cellResultConverter = new StringConverter();

    public CrimeItemDao(DaoConfig config) {
        super(config);
    }
    
    public CrimeItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"crime\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"SCENE_ID\" TEXT," + // 1: sceneId
                "\"SCENE_NO\" TEXT," + // 2: sceneNo
                "\"CASE_ID\" TEXT," + // 3: caseId
                "\"RECEPTION_ID\" TEXT," + // 4: receptionId
                "\"IS_UPLOAD\" TEXT," + // 5: isUpload
                "\"LOGIN_NAME\" TEXT," + // 6: loginName
                "\"USER_NAME\" TEXT," + // 7: userName
                "\"UNIT_CODE\" TEXT," + // 8: unitCode
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 9: createTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 10: updateTime
                "\"COMPLETE\" TEXT," + // 11: complete
                "\"IS_COLLECTING\" INTEGER," + // 12: isCollecting
                "\"IS_COLLECTED\" INTEGER," + // 13: isCollected
                "\"CELL_RESULT\" TEXT," + // 14: cellResult
                "\"GPS_LAT\" REAL NOT NULL ," + // 15: gpsLat
                "\"GPS_LON\" REAL NOT NULL ," + // 16: gpsLon
                "\"GET_LAST_DATA\" INTEGER," + // 17: getLastData
                "\"CASETYPE\" TEXT," + // 18: casetype
                "\"CASETYPE_KEY\" TEXT," + // 19: casetypeKey
                "\"LOCATION\" TEXT," + // 20: location
                "\"ACCESS_INSPECTORS\" TEXT," + // 21: accessInspectors
                "\"ACCESS_INSPECTORS_KEY\" TEXT," + // 22: accessInspectorsKey
                "\"ACCESS_REASON\" TEXT," + // 23: accessReason
                "\"CASE_OCCUR_PROCESS\" TEXT," + // 24: caseOccurProcess
                "\"WEATHER_CONDITION\" TEXT," + // 25: weatherCondition
                "\"WEATHER_CONDITION_KEY\" TEXT," + // 26: weatherConditionKey
                "\"WIND_DIRECTION\" TEXT," + // 27: windDirection
                "\"WIND_DIRECTION_KEY\" TEXT," + // 28: windDirectionKey
                "\"TEMPERATURE\" TEXT," + // 29: temperature
                "\"HUMIDITY\" TEXT," + // 30: humidity
                "\"AREA\" TEXT," + // 31: area
                "\"AREA_KEY\" TEXT," + // 32: areaKey
                "\"OCCURRED_START_TIME\" INTEGER NOT NULL ," + // 33: occurred_start_time
                "\"OCCURRED_END_TIME\" INTEGER NOT NULL ," + // 34: occurred_end_time
                "\"GET_ACCESS_TIME\" INTEGER NOT NULL ," + // 35: get_access_time
                "\"UNITS_ASSIGNED\" TEXT," + // 36: unitsAssigned
                "\"ACCESS_POLICEMEN\" TEXT," + // 37: accessPolicemen
                "\"ACCESS_START_TIME\" INTEGER NOT NULL ," + // 38: access_start_time
                "\"ACCESS_END_TIME\" INTEGER NOT NULL ," + // 39: access_end_time
                "\"ACCESS_LOCATION\" TEXT," + // 40: accessLocation
                "\"SCENE_CONDITION\" TEXT," + // 41: sceneCondition
                "\"SCENE_CONDITION_KEY\" TEXT," + // 42: sceneConditionKey
                "\"CHANGE_OPTION\" TEXT," + // 43: changeOption
                "\"CHANGE_OPTION_KEY\" TEXT," + // 44: changeOptionKey
                "\"CHANGE_REASON\" TEXT," + // 45: changeReason
                "\"ILLUMINATION_CONDITION\" TEXT," + // 46: illuminationCondition
                "\"ILLUMINATION_CONDITION_KEY\" TEXT," + // 47: illuminationConditionKey
                "\"PRODUCT_PEOPLE_NAME\" TEXT," + // 48: productPeopleName
                "\"PRODUCT_PEOPLE_UNIT\" TEXT," + // 49: productPeopleUnit
                "\"PRODUCT_PEOPLE_DUTIES\" TEXT," + // 50: productPeopleDuties
                "\"SAFEGUARD\" TEXT," + // 51: safeguard
                "\"SCENE_CONDUCTOR\" TEXT," + // 52: sceneConductor
                "\"SCENE_CONDUCTOR_KEY\" TEXT," + // 53: sceneConductorKey
                "\"OVERVIEW\" TEXT," + // 54: overview
                "\"OVERVIEW_ID\" TEXT," + // 55: overviewId
                "\"OPINION_ID\" TEXT," + // 56: opinionId
                "\"OPINION_RESULT_ID\" TEXT," + // 57: opinionResultId
                "\"CRIME_PEOPLE_NUMBER\" TEXT," + // 58: crimePeopleNumber
                "\"CRIME_PEOPLE_NUMBER_KEY\" TEXT," + // 59: crimePeopleNumberKey
                "\"CRIME_PEOPLE_NUMBER_DESC\" TEXT," + // 60: crimePeopleNumberDesc
                "\"CRIME_MEANS\" TEXT," + // 61: crimeMeans
                "\"CRIME_MEANS_KEY\" TEXT," + // 62: crimeMeansKey
                "\"CRIME_MEANS_DESC\" TEXT," + // 63: crimeMeansDesc
                "\"CRIME_CHARACTER\" TEXT," + // 64: crimeCharacter
                "\"CRIME_CHARACTER_KEY\" TEXT," + // 65: crimeCharacterKey
                "\"CRIME_CHARACTER_DESC\" TEXT," + // 66: crimeCharacterDesc
                "\"CRIME_ENTRANCE\" TEXT," + // 67: crimeEntrance
                "\"CRIME_ENTRANCE_KEY\" TEXT," + // 68: crimeEntranceKey
                "\"CRIME_ENTRANCE_DESC\" TEXT," + // 69: crimeEntranceDesc
                "\"CRIME_TIMING\" TEXT," + // 70: crimeTiming
                "\"CRIME_TIMING_KEY\" TEXT," + // 71: crimeTimingKey
                "\"CRIME_TIMING_DESC\" TEXT," + // 72: crimeTimingDesc
                "\"SELECT_OBJECT\" TEXT," + // 73: selectObject
                "\"SELECT_OBJECT_KEY\" TEXT," + // 74: selectObjectKey
                "\"SELECT_OBJECT_DESC\" TEXT," + // 75: selectObjectDesc
                "\"CRIME_EXPORT\" TEXT," + // 76: crimeExport
                "\"CRIME_EXPORT_KEY\" TEXT," + // 77: crimeExportKey
                "\"CRIME_EXPORT_DESC\" TEXT," + // 78: crimeExportDesc
                "\"CRIME_PEOPLE_FEATURE\" TEXT," + // 79: crimePeopleFeature
                "\"CRIME_PEOPLE_FEATURE_KEY\" TEXT," + // 80: crimePeopleFeatureKey
                "\"CRIME_PEOPLE_FEATURE_DESC\" TEXT," + // 81: crimePeopleFeatureDesc
                "\"CRIME_FEATURE\" TEXT," + // 82: crimeFeature
                "\"CRIME_FEATURE_KEY\" TEXT," + // 83: crimeFeatureKey
                "\"CRIME_FEATURE_DESC\" TEXT," + // 84: crimeFeatureDesc
                "\"INTRUSIVE_METHOD\" TEXT," + // 85: intrusiveMethod
                "\"INTRUSIVE_METHOD_KEY\" TEXT," + // 86: intrusiveMethodKey
                "\"INTRUSIVE_METHOD_DESC\" TEXT," + // 87: intrusiveMethodDesc
                "\"SELECT_LOCATION\" TEXT," + // 88: selectLocation
                "\"SELECT_LOCATION_KEY\" TEXT," + // 89: selectLocationKey
                "\"SELECT_LOCATION_DESC\" TEXT," + // 90: selectLocationDesc
                "\"CRIME_PURPOSE\" TEXT," + // 91: crimePurpose
                "\"CRIME_PURPOSE_KEY\" TEXT," + // 92: crimePurposeKey
                "\"CRIME_PURPOSE_DESC\" TEXT," + // 93: crimePurposeDesc
                "\"REV1\" TEXT," + // 94: rev1
                "\"REV2\" TEXT," + // 95: rev2
                "\"REV3\" TEXT," + // 96: rev3
                "\"REV4\" TEXT);"); // 97: rev4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"crime\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CrimeItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String sceneId = entity.getSceneId();
        if (sceneId != null) {
            stmt.bindString(2, sceneId);
        }
 
        String sceneNo = entity.getSceneNo();
        if (sceneNo != null) {
            stmt.bindString(3, sceneNo);
        }
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(4, caseId);
        }
 
        String receptionId = entity.getReceptionId();
        if (receptionId != null) {
            stmt.bindString(5, receptionId);
        }
 
        String isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindString(6, isUpload);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(7, loginName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(8, userName);
        }
 
        String unitCode = entity.getUnitCode();
        if (unitCode != null) {
            stmt.bindString(9, unitCode);
        }
        stmt.bindLong(10, entity.getCreateTime());
        stmt.bindLong(11, entity.getUpdateTime());
 
        String complete = entity.getComplete();
        if (complete != null) {
            stmt.bindString(12, complete);
        }
 
        Boolean isCollecting = entity.getIsCollecting();
        if (isCollecting != null) {
            stmt.bindLong(13, isCollecting ? 1L: 0L);
        }
 
        Boolean isCollected = entity.getIsCollected();
        if (isCollected != null) {
            stmt.bindLong(14, isCollected ? 1L: 0L);
        }
 
        List cellResult = entity.getCellResult();
        if (cellResult != null) {
            stmt.bindString(15, cellResultConverter.convertToDatabaseValue(cellResult));
        }
        stmt.bindDouble(16, entity.getGpsLat());
        stmt.bindDouble(17, entity.getGpsLon());
 
        Boolean getLastData = entity.getGetLastData();
        if (getLastData != null) {
            stmt.bindLong(18, getLastData ? 1L: 0L);
        }
 
        String casetype = entity.getCasetype();
        if (casetype != null) {
            stmt.bindString(19, casetype);
        }
 
        String casetypeKey = entity.getCasetypeKey();
        if (casetypeKey != null) {
            stmt.bindString(20, casetypeKey);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(21, location);
        }
 
        String accessInspectors = entity.getAccessInspectors();
        if (accessInspectors != null) {
            stmt.bindString(22, accessInspectors);
        }
 
        String accessInspectorsKey = entity.getAccessInspectorsKey();
        if (accessInspectorsKey != null) {
            stmt.bindString(23, accessInspectorsKey);
        }
 
        String accessReason = entity.getAccessReason();
        if (accessReason != null) {
            stmt.bindString(24, accessReason);
        }
 
        String caseOccurProcess = entity.getCaseOccurProcess();
        if (caseOccurProcess != null) {
            stmt.bindString(25, caseOccurProcess);
        }
 
        String weatherCondition = entity.getWeatherCondition();
        if (weatherCondition != null) {
            stmt.bindString(26, weatherCondition);
        }
 
        String weatherConditionKey = entity.getWeatherConditionKey();
        if (weatherConditionKey != null) {
            stmt.bindString(27, weatherConditionKey);
        }
 
        String windDirection = entity.getWindDirection();
        if (windDirection != null) {
            stmt.bindString(28, windDirection);
        }
 
        String windDirectionKey = entity.getWindDirectionKey();
        if (windDirectionKey != null) {
            stmt.bindString(29, windDirectionKey);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(30, temperature);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(31, humidity);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(32, area);
        }
 
        String areaKey = entity.getAreaKey();
        if (areaKey != null) {
            stmt.bindString(33, areaKey);
        }
        stmt.bindLong(34, entity.getOccurred_start_time());
        stmt.bindLong(35, entity.getOccurred_end_time());
        stmt.bindLong(36, entity.getGet_access_time());
 
        String unitsAssigned = entity.getUnitsAssigned();
        if (unitsAssigned != null) {
            stmt.bindString(37, unitsAssigned);
        }
 
        String accessPolicemen = entity.getAccessPolicemen();
        if (accessPolicemen != null) {
            stmt.bindString(38, accessPolicemen);
        }
        stmt.bindLong(39, entity.getAccess_start_time());
        stmt.bindLong(40, entity.getAccess_end_time());
 
        String accessLocation = entity.getAccessLocation();
        if (accessLocation != null) {
            stmt.bindString(41, accessLocation);
        }
 
        String sceneCondition = entity.getSceneCondition();
        if (sceneCondition != null) {
            stmt.bindString(42, sceneCondition);
        }
 
        String sceneConditionKey = entity.getSceneConditionKey();
        if (sceneConditionKey != null) {
            stmt.bindString(43, sceneConditionKey);
        }
 
        String changeOption = entity.getChangeOption();
        if (changeOption != null) {
            stmt.bindString(44, changeOption);
        }
 
        String changeOptionKey = entity.getChangeOptionKey();
        if (changeOptionKey != null) {
            stmt.bindString(45, changeOptionKey);
        }
 
        String changeReason = entity.getChangeReason();
        if (changeReason != null) {
            stmt.bindString(46, changeReason);
        }
 
        String illuminationCondition = entity.getIlluminationCondition();
        if (illuminationCondition != null) {
            stmt.bindString(47, illuminationCondition);
        }
 
        String illuminationConditionKey = entity.getIlluminationConditionKey();
        if (illuminationConditionKey != null) {
            stmt.bindString(48, illuminationConditionKey);
        }
 
        String productPeopleName = entity.getProductPeopleName();
        if (productPeopleName != null) {
            stmt.bindString(49, productPeopleName);
        }
 
        String productPeopleUnit = entity.getProductPeopleUnit();
        if (productPeopleUnit != null) {
            stmt.bindString(50, productPeopleUnit);
        }
 
        String productPeopleDuties = entity.getProductPeopleDuties();
        if (productPeopleDuties != null) {
            stmt.bindString(51, productPeopleDuties);
        }
 
        String safeguard = entity.getSafeguard();
        if (safeguard != null) {
            stmt.bindString(52, safeguard);
        }
 
        String sceneConductor = entity.getSceneConductor();
        if (sceneConductor != null) {
            stmt.bindString(53, sceneConductor);
        }
 
        String sceneConductorKey = entity.getSceneConductorKey();
        if (sceneConductorKey != null) {
            stmt.bindString(54, sceneConductorKey);
        }
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(55, overview);
        }
 
        String overviewId = entity.getOverviewId();
        if (overviewId != null) {
            stmt.bindString(56, overviewId);
        }
 
        String opinionId = entity.getOpinionId();
        if (opinionId != null) {
            stmt.bindString(57, opinionId);
        }
 
        String opinionResultId = entity.getOpinionResultId();
        if (opinionResultId != null) {
            stmt.bindString(58, opinionResultId);
        }
 
        String crimePeopleNumber = entity.getCrimePeopleNumber();
        if (crimePeopleNumber != null) {
            stmt.bindString(59, crimePeopleNumber);
        }
 
        String crimePeopleNumberKey = entity.getCrimePeopleNumberKey();
        if (crimePeopleNumberKey != null) {
            stmt.bindString(60, crimePeopleNumberKey);
        }
 
        String crimePeopleNumberDesc = entity.getCrimePeopleNumberDesc();
        if (crimePeopleNumberDesc != null) {
            stmt.bindString(61, crimePeopleNumberDesc);
        }
 
        String crimeMeans = entity.getCrimeMeans();
        if (crimeMeans != null) {
            stmt.bindString(62, crimeMeans);
        }
 
        String crimeMeansKey = entity.getCrimeMeansKey();
        if (crimeMeansKey != null) {
            stmt.bindString(63, crimeMeansKey);
        }
 
        String crimeMeansDesc = entity.getCrimeMeansDesc();
        if (crimeMeansDesc != null) {
            stmt.bindString(64, crimeMeansDesc);
        }
 
        String crimeCharacter = entity.getCrimeCharacter();
        if (crimeCharacter != null) {
            stmt.bindString(65, crimeCharacter);
        }
 
        String crimeCharacterKey = entity.getCrimeCharacterKey();
        if (crimeCharacterKey != null) {
            stmt.bindString(66, crimeCharacterKey);
        }
 
        String crimeCharacterDesc = entity.getCrimeCharacterDesc();
        if (crimeCharacterDesc != null) {
            stmt.bindString(67, crimeCharacterDesc);
        }
 
        String crimeEntrance = entity.getCrimeEntrance();
        if (crimeEntrance != null) {
            stmt.bindString(68, crimeEntrance);
        }
 
        String crimeEntranceKey = entity.getCrimeEntranceKey();
        if (crimeEntranceKey != null) {
            stmt.bindString(69, crimeEntranceKey);
        }
 
        String crimeEntranceDesc = entity.getCrimeEntranceDesc();
        if (crimeEntranceDesc != null) {
            stmt.bindString(70, crimeEntranceDesc);
        }
 
        String crimeTiming = entity.getCrimeTiming();
        if (crimeTiming != null) {
            stmt.bindString(71, crimeTiming);
        }
 
        String crimeTimingKey = entity.getCrimeTimingKey();
        if (crimeTimingKey != null) {
            stmt.bindString(72, crimeTimingKey);
        }
 
        String crimeTimingDesc = entity.getCrimeTimingDesc();
        if (crimeTimingDesc != null) {
            stmt.bindString(73, crimeTimingDesc);
        }
 
        String selectObject = entity.getSelectObject();
        if (selectObject != null) {
            stmt.bindString(74, selectObject);
        }
 
        String selectObjectKey = entity.getSelectObjectKey();
        if (selectObjectKey != null) {
            stmt.bindString(75, selectObjectKey);
        }
 
        String selectObjectDesc = entity.getSelectObjectDesc();
        if (selectObjectDesc != null) {
            stmt.bindString(76, selectObjectDesc);
        }
 
        String crimeExport = entity.getCrimeExport();
        if (crimeExport != null) {
            stmt.bindString(77, crimeExport);
        }
 
        String crimeExportKey = entity.getCrimeExportKey();
        if (crimeExportKey != null) {
            stmt.bindString(78, crimeExportKey);
        }
 
        String crimeExportDesc = entity.getCrimeExportDesc();
        if (crimeExportDesc != null) {
            stmt.bindString(79, crimeExportDesc);
        }
 
        String crimePeopleFeature = entity.getCrimePeopleFeature();
        if (crimePeopleFeature != null) {
            stmt.bindString(80, crimePeopleFeature);
        }
 
        String crimePeopleFeatureKey = entity.getCrimePeopleFeatureKey();
        if (crimePeopleFeatureKey != null) {
            stmt.bindString(81, crimePeopleFeatureKey);
        }
 
        String crimePeopleFeatureDesc = entity.getCrimePeopleFeatureDesc();
        if (crimePeopleFeatureDesc != null) {
            stmt.bindString(82, crimePeopleFeatureDesc);
        }
 
        String crimeFeature = entity.getCrimeFeature();
        if (crimeFeature != null) {
            stmt.bindString(83, crimeFeature);
        }
 
        String crimeFeatureKey = entity.getCrimeFeatureKey();
        if (crimeFeatureKey != null) {
            stmt.bindString(84, crimeFeatureKey);
        }
 
        String crimeFeatureDesc = entity.getCrimeFeatureDesc();
        if (crimeFeatureDesc != null) {
            stmt.bindString(85, crimeFeatureDesc);
        }
 
        String intrusiveMethod = entity.getIntrusiveMethod();
        if (intrusiveMethod != null) {
            stmt.bindString(86, intrusiveMethod);
        }
 
        String intrusiveMethodKey = entity.getIntrusiveMethodKey();
        if (intrusiveMethodKey != null) {
            stmt.bindString(87, intrusiveMethodKey);
        }
 
        String intrusiveMethodDesc = entity.getIntrusiveMethodDesc();
        if (intrusiveMethodDesc != null) {
            stmt.bindString(88, intrusiveMethodDesc);
        }
 
        String selectLocation = entity.getSelectLocation();
        if (selectLocation != null) {
            stmt.bindString(89, selectLocation);
        }
 
        String selectLocationKey = entity.getSelectLocationKey();
        if (selectLocationKey != null) {
            stmt.bindString(90, selectLocationKey);
        }
 
        String selectLocationDesc = entity.getSelectLocationDesc();
        if (selectLocationDesc != null) {
            stmt.bindString(91, selectLocationDesc);
        }
 
        String crimePurpose = entity.getCrimePurpose();
        if (crimePurpose != null) {
            stmt.bindString(92, crimePurpose);
        }
 
        String crimePurposeKey = entity.getCrimePurposeKey();
        if (crimePurposeKey != null) {
            stmt.bindString(93, crimePurposeKey);
        }
 
        String crimePurposeDesc = entity.getCrimePurposeDesc();
        if (crimePurposeDesc != null) {
            stmt.bindString(94, crimePurposeDesc);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(95, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(96, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(97, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(98, rev4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CrimeItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String sceneId = entity.getSceneId();
        if (sceneId != null) {
            stmt.bindString(2, sceneId);
        }
 
        String sceneNo = entity.getSceneNo();
        if (sceneNo != null) {
            stmt.bindString(3, sceneNo);
        }
 
        String caseId = entity.getCaseId();
        if (caseId != null) {
            stmt.bindString(4, caseId);
        }
 
        String receptionId = entity.getReceptionId();
        if (receptionId != null) {
            stmt.bindString(5, receptionId);
        }
 
        String isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindString(6, isUpload);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(7, loginName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(8, userName);
        }
 
        String unitCode = entity.getUnitCode();
        if (unitCode != null) {
            stmt.bindString(9, unitCode);
        }
        stmt.bindLong(10, entity.getCreateTime());
        stmt.bindLong(11, entity.getUpdateTime());
 
        String complete = entity.getComplete();
        if (complete != null) {
            stmt.bindString(12, complete);
        }
 
        Boolean isCollecting = entity.getIsCollecting();
        if (isCollecting != null) {
            stmt.bindLong(13, isCollecting ? 1L: 0L);
        }
 
        Boolean isCollected = entity.getIsCollected();
        if (isCollected != null) {
            stmt.bindLong(14, isCollected ? 1L: 0L);
        }
 
        List cellResult = entity.getCellResult();
        if (cellResult != null) {
            stmt.bindString(15, cellResultConverter.convertToDatabaseValue(cellResult));
        }
        stmt.bindDouble(16, entity.getGpsLat());
        stmt.bindDouble(17, entity.getGpsLon());
 
        Boolean getLastData = entity.getGetLastData();
        if (getLastData != null) {
            stmt.bindLong(18, getLastData ? 1L: 0L);
        }
 
        String casetype = entity.getCasetype();
        if (casetype != null) {
            stmt.bindString(19, casetype);
        }
 
        String casetypeKey = entity.getCasetypeKey();
        if (casetypeKey != null) {
            stmt.bindString(20, casetypeKey);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(21, location);
        }
 
        String accessInspectors = entity.getAccessInspectors();
        if (accessInspectors != null) {
            stmt.bindString(22, accessInspectors);
        }
 
        String accessInspectorsKey = entity.getAccessInspectorsKey();
        if (accessInspectorsKey != null) {
            stmt.bindString(23, accessInspectorsKey);
        }
 
        String accessReason = entity.getAccessReason();
        if (accessReason != null) {
            stmt.bindString(24, accessReason);
        }
 
        String caseOccurProcess = entity.getCaseOccurProcess();
        if (caseOccurProcess != null) {
            stmt.bindString(25, caseOccurProcess);
        }
 
        String weatherCondition = entity.getWeatherCondition();
        if (weatherCondition != null) {
            stmt.bindString(26, weatherCondition);
        }
 
        String weatherConditionKey = entity.getWeatherConditionKey();
        if (weatherConditionKey != null) {
            stmt.bindString(27, weatherConditionKey);
        }
 
        String windDirection = entity.getWindDirection();
        if (windDirection != null) {
            stmt.bindString(28, windDirection);
        }
 
        String windDirectionKey = entity.getWindDirectionKey();
        if (windDirectionKey != null) {
            stmt.bindString(29, windDirectionKey);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(30, temperature);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(31, humidity);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(32, area);
        }
 
        String areaKey = entity.getAreaKey();
        if (areaKey != null) {
            stmt.bindString(33, areaKey);
        }
        stmt.bindLong(34, entity.getOccurred_start_time());
        stmt.bindLong(35, entity.getOccurred_end_time());
        stmt.bindLong(36, entity.getGet_access_time());
 
        String unitsAssigned = entity.getUnitsAssigned();
        if (unitsAssigned != null) {
            stmt.bindString(37, unitsAssigned);
        }
 
        String accessPolicemen = entity.getAccessPolicemen();
        if (accessPolicemen != null) {
            stmt.bindString(38, accessPolicemen);
        }
        stmt.bindLong(39, entity.getAccess_start_time());
        stmt.bindLong(40, entity.getAccess_end_time());
 
        String accessLocation = entity.getAccessLocation();
        if (accessLocation != null) {
            stmt.bindString(41, accessLocation);
        }
 
        String sceneCondition = entity.getSceneCondition();
        if (sceneCondition != null) {
            stmt.bindString(42, sceneCondition);
        }
 
        String sceneConditionKey = entity.getSceneConditionKey();
        if (sceneConditionKey != null) {
            stmt.bindString(43, sceneConditionKey);
        }
 
        String changeOption = entity.getChangeOption();
        if (changeOption != null) {
            stmt.bindString(44, changeOption);
        }
 
        String changeOptionKey = entity.getChangeOptionKey();
        if (changeOptionKey != null) {
            stmt.bindString(45, changeOptionKey);
        }
 
        String changeReason = entity.getChangeReason();
        if (changeReason != null) {
            stmt.bindString(46, changeReason);
        }
 
        String illuminationCondition = entity.getIlluminationCondition();
        if (illuminationCondition != null) {
            stmt.bindString(47, illuminationCondition);
        }
 
        String illuminationConditionKey = entity.getIlluminationConditionKey();
        if (illuminationConditionKey != null) {
            stmt.bindString(48, illuminationConditionKey);
        }
 
        String productPeopleName = entity.getProductPeopleName();
        if (productPeopleName != null) {
            stmt.bindString(49, productPeopleName);
        }
 
        String productPeopleUnit = entity.getProductPeopleUnit();
        if (productPeopleUnit != null) {
            stmt.bindString(50, productPeopleUnit);
        }
 
        String productPeopleDuties = entity.getProductPeopleDuties();
        if (productPeopleDuties != null) {
            stmt.bindString(51, productPeopleDuties);
        }
 
        String safeguard = entity.getSafeguard();
        if (safeguard != null) {
            stmt.bindString(52, safeguard);
        }
 
        String sceneConductor = entity.getSceneConductor();
        if (sceneConductor != null) {
            stmt.bindString(53, sceneConductor);
        }
 
        String sceneConductorKey = entity.getSceneConductorKey();
        if (sceneConductorKey != null) {
            stmt.bindString(54, sceneConductorKey);
        }
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(55, overview);
        }
 
        String overviewId = entity.getOverviewId();
        if (overviewId != null) {
            stmt.bindString(56, overviewId);
        }
 
        String opinionId = entity.getOpinionId();
        if (opinionId != null) {
            stmt.bindString(57, opinionId);
        }
 
        String opinionResultId = entity.getOpinionResultId();
        if (opinionResultId != null) {
            stmt.bindString(58, opinionResultId);
        }
 
        String crimePeopleNumber = entity.getCrimePeopleNumber();
        if (crimePeopleNumber != null) {
            stmt.bindString(59, crimePeopleNumber);
        }
 
        String crimePeopleNumberKey = entity.getCrimePeopleNumberKey();
        if (crimePeopleNumberKey != null) {
            stmt.bindString(60, crimePeopleNumberKey);
        }
 
        String crimePeopleNumberDesc = entity.getCrimePeopleNumberDesc();
        if (crimePeopleNumberDesc != null) {
            stmt.bindString(61, crimePeopleNumberDesc);
        }
 
        String crimeMeans = entity.getCrimeMeans();
        if (crimeMeans != null) {
            stmt.bindString(62, crimeMeans);
        }
 
        String crimeMeansKey = entity.getCrimeMeansKey();
        if (crimeMeansKey != null) {
            stmt.bindString(63, crimeMeansKey);
        }
 
        String crimeMeansDesc = entity.getCrimeMeansDesc();
        if (crimeMeansDesc != null) {
            stmt.bindString(64, crimeMeansDesc);
        }
 
        String crimeCharacter = entity.getCrimeCharacter();
        if (crimeCharacter != null) {
            stmt.bindString(65, crimeCharacter);
        }
 
        String crimeCharacterKey = entity.getCrimeCharacterKey();
        if (crimeCharacterKey != null) {
            stmt.bindString(66, crimeCharacterKey);
        }
 
        String crimeCharacterDesc = entity.getCrimeCharacterDesc();
        if (crimeCharacterDesc != null) {
            stmt.bindString(67, crimeCharacterDesc);
        }
 
        String crimeEntrance = entity.getCrimeEntrance();
        if (crimeEntrance != null) {
            stmt.bindString(68, crimeEntrance);
        }
 
        String crimeEntranceKey = entity.getCrimeEntranceKey();
        if (crimeEntranceKey != null) {
            stmt.bindString(69, crimeEntranceKey);
        }
 
        String crimeEntranceDesc = entity.getCrimeEntranceDesc();
        if (crimeEntranceDesc != null) {
            stmt.bindString(70, crimeEntranceDesc);
        }
 
        String crimeTiming = entity.getCrimeTiming();
        if (crimeTiming != null) {
            stmt.bindString(71, crimeTiming);
        }
 
        String crimeTimingKey = entity.getCrimeTimingKey();
        if (crimeTimingKey != null) {
            stmt.bindString(72, crimeTimingKey);
        }
 
        String crimeTimingDesc = entity.getCrimeTimingDesc();
        if (crimeTimingDesc != null) {
            stmt.bindString(73, crimeTimingDesc);
        }
 
        String selectObject = entity.getSelectObject();
        if (selectObject != null) {
            stmt.bindString(74, selectObject);
        }
 
        String selectObjectKey = entity.getSelectObjectKey();
        if (selectObjectKey != null) {
            stmt.bindString(75, selectObjectKey);
        }
 
        String selectObjectDesc = entity.getSelectObjectDesc();
        if (selectObjectDesc != null) {
            stmt.bindString(76, selectObjectDesc);
        }
 
        String crimeExport = entity.getCrimeExport();
        if (crimeExport != null) {
            stmt.bindString(77, crimeExport);
        }
 
        String crimeExportKey = entity.getCrimeExportKey();
        if (crimeExportKey != null) {
            stmt.bindString(78, crimeExportKey);
        }
 
        String crimeExportDesc = entity.getCrimeExportDesc();
        if (crimeExportDesc != null) {
            stmt.bindString(79, crimeExportDesc);
        }
 
        String crimePeopleFeature = entity.getCrimePeopleFeature();
        if (crimePeopleFeature != null) {
            stmt.bindString(80, crimePeopleFeature);
        }
 
        String crimePeopleFeatureKey = entity.getCrimePeopleFeatureKey();
        if (crimePeopleFeatureKey != null) {
            stmt.bindString(81, crimePeopleFeatureKey);
        }
 
        String crimePeopleFeatureDesc = entity.getCrimePeopleFeatureDesc();
        if (crimePeopleFeatureDesc != null) {
            stmt.bindString(82, crimePeopleFeatureDesc);
        }
 
        String crimeFeature = entity.getCrimeFeature();
        if (crimeFeature != null) {
            stmt.bindString(83, crimeFeature);
        }
 
        String crimeFeatureKey = entity.getCrimeFeatureKey();
        if (crimeFeatureKey != null) {
            stmt.bindString(84, crimeFeatureKey);
        }
 
        String crimeFeatureDesc = entity.getCrimeFeatureDesc();
        if (crimeFeatureDesc != null) {
            stmt.bindString(85, crimeFeatureDesc);
        }
 
        String intrusiveMethod = entity.getIntrusiveMethod();
        if (intrusiveMethod != null) {
            stmt.bindString(86, intrusiveMethod);
        }
 
        String intrusiveMethodKey = entity.getIntrusiveMethodKey();
        if (intrusiveMethodKey != null) {
            stmt.bindString(87, intrusiveMethodKey);
        }
 
        String intrusiveMethodDesc = entity.getIntrusiveMethodDesc();
        if (intrusiveMethodDesc != null) {
            stmt.bindString(88, intrusiveMethodDesc);
        }
 
        String selectLocation = entity.getSelectLocation();
        if (selectLocation != null) {
            stmt.bindString(89, selectLocation);
        }
 
        String selectLocationKey = entity.getSelectLocationKey();
        if (selectLocationKey != null) {
            stmt.bindString(90, selectLocationKey);
        }
 
        String selectLocationDesc = entity.getSelectLocationDesc();
        if (selectLocationDesc != null) {
            stmt.bindString(91, selectLocationDesc);
        }
 
        String crimePurpose = entity.getCrimePurpose();
        if (crimePurpose != null) {
            stmt.bindString(92, crimePurpose);
        }
 
        String crimePurposeKey = entity.getCrimePurposeKey();
        if (crimePurposeKey != null) {
            stmt.bindString(93, crimePurposeKey);
        }
 
        String crimePurposeDesc = entity.getCrimePurposeDesc();
        if (crimePurposeDesc != null) {
            stmt.bindString(94, crimePurposeDesc);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(95, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(96, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(97, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(98, rev4);
        }
    }

    @Override
    protected final void attachEntity(CrimeItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CrimeItem readEntity(Cursor cursor, int offset) {
        CrimeItem entity = new CrimeItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sceneId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sceneNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // caseId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // receptionId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isUpload
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // loginName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // unitCode
            cursor.getLong(offset + 9), // createTime
            cursor.getLong(offset + 10), // updateTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // complete
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isCollecting
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // isCollected
            cursor.isNull(offset + 14) ? null : cellResultConverter.convertToEntityProperty(cursor.getString(offset + 14)), // cellResult
            cursor.getDouble(offset + 15), // gpsLat
            cursor.getDouble(offset + 16), // gpsLon
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // getLastData
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // casetype
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // casetypeKey
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // location
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // accessInspectors
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // accessInspectorsKey
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // accessReason
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // caseOccurProcess
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // weatherCondition
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // weatherConditionKey
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // windDirection
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // windDirectionKey
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // temperature
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // humidity
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // area
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // areaKey
            cursor.getLong(offset + 33), // occurred_start_time
            cursor.getLong(offset + 34), // occurred_end_time
            cursor.getLong(offset + 35), // get_access_time
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // unitsAssigned
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // accessPolicemen
            cursor.getLong(offset + 38), // access_start_time
            cursor.getLong(offset + 39), // access_end_time
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // accessLocation
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // sceneCondition
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // sceneConditionKey
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // changeOption
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // changeOptionKey
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // changeReason
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // illuminationCondition
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // illuminationConditionKey
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // productPeopleName
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // productPeopleUnit
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // productPeopleDuties
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // safeguard
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // sceneConductor
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // sceneConductorKey
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // overview
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // overviewId
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // opinionId
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // opinionResultId
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // crimePeopleNumber
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // crimePeopleNumberKey
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // crimePeopleNumberDesc
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // crimeMeans
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // crimeMeansKey
            cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // crimeMeansDesc
            cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // crimeCharacter
            cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // crimeCharacterKey
            cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66), // crimeCharacterDesc
            cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67), // crimeEntrance
            cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68), // crimeEntranceKey
            cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69), // crimeEntranceDesc
            cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70), // crimeTiming
            cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71), // crimeTimingKey
            cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72), // crimeTimingDesc
            cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73), // selectObject
            cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74), // selectObjectKey
            cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75), // selectObjectDesc
            cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76), // crimeExport
            cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77), // crimeExportKey
            cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78), // crimeExportDesc
            cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79), // crimePeopleFeature
            cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80), // crimePeopleFeatureKey
            cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81), // crimePeopleFeatureDesc
            cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82), // crimeFeature
            cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83), // crimeFeatureKey
            cursor.isNull(offset + 84) ? null : cursor.getString(offset + 84), // crimeFeatureDesc
            cursor.isNull(offset + 85) ? null : cursor.getString(offset + 85), // intrusiveMethod
            cursor.isNull(offset + 86) ? null : cursor.getString(offset + 86), // intrusiveMethodKey
            cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87), // intrusiveMethodDesc
            cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88), // selectLocation
            cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89), // selectLocationKey
            cursor.isNull(offset + 90) ? null : cursor.getString(offset + 90), // selectLocationDesc
            cursor.isNull(offset + 91) ? null : cursor.getString(offset + 91), // crimePurpose
            cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92), // crimePurposeKey
            cursor.isNull(offset + 93) ? null : cursor.getString(offset + 93), // crimePurposeDesc
            cursor.isNull(offset + 94) ? null : cursor.getString(offset + 94), // rev1
            cursor.isNull(offset + 95) ? null : cursor.getString(offset + 95), // rev2
            cursor.isNull(offset + 96) ? null : cursor.getString(offset + 96), // rev3
            cursor.isNull(offset + 97) ? null : cursor.getString(offset + 97) // rev4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CrimeItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSceneId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSceneNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCaseId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReceptionId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsUpload(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLoginName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUnitCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.getLong(offset + 9));
        entity.setUpdateTime(cursor.getLong(offset + 10));
        entity.setComplete(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsCollecting(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setIsCollected(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setCellResult(cursor.isNull(offset + 14) ? null : cellResultConverter.convertToEntityProperty(cursor.getString(offset + 14)));
        entity.setGpsLat(cursor.getDouble(offset + 15));
        entity.setGpsLon(cursor.getDouble(offset + 16));
        entity.setGetLastData(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setCasetype(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCasetypeKey(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLocation(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAccessInspectors(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAccessInspectorsKey(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setAccessReason(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCaseOccurProcess(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setWeatherCondition(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setWeatherConditionKey(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setWindDirection(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setWindDirectionKey(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setTemperature(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setHumidity(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setArea(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setAreaKey(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setOccurred_start_time(cursor.getLong(offset + 33));
        entity.setOccurred_end_time(cursor.getLong(offset + 34));
        entity.setGet_access_time(cursor.getLong(offset + 35));
        entity.setUnitsAssigned(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setAccessPolicemen(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setAccess_start_time(cursor.getLong(offset + 38));
        entity.setAccess_end_time(cursor.getLong(offset + 39));
        entity.setAccessLocation(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setSceneCondition(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setSceneConditionKey(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setChangeOption(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setChangeOptionKey(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setChangeReason(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setIlluminationCondition(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setIlluminationConditionKey(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setProductPeopleName(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setProductPeopleUnit(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setProductPeopleDuties(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setSafeguard(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setSceneConductor(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setSceneConductorKey(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setOverview(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setOverviewId(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setOpinionId(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setOpinionResultId(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setCrimePeopleNumber(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setCrimePeopleNumberKey(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setCrimePeopleNumberDesc(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setCrimeMeans(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setCrimeMeansKey(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setCrimeMeansDesc(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setCrimeCharacter(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setCrimeCharacterKey(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setCrimeCharacterDesc(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
        entity.setCrimeEntrance(cursor.isNull(offset + 67) ? null : cursor.getString(offset + 67));
        entity.setCrimeEntranceKey(cursor.isNull(offset + 68) ? null : cursor.getString(offset + 68));
        entity.setCrimeEntranceDesc(cursor.isNull(offset + 69) ? null : cursor.getString(offset + 69));
        entity.setCrimeTiming(cursor.isNull(offset + 70) ? null : cursor.getString(offset + 70));
        entity.setCrimeTimingKey(cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71));
        entity.setCrimeTimingDesc(cursor.isNull(offset + 72) ? null : cursor.getString(offset + 72));
        entity.setSelectObject(cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73));
        entity.setSelectObjectKey(cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74));
        entity.setSelectObjectDesc(cursor.isNull(offset + 75) ? null : cursor.getString(offset + 75));
        entity.setCrimeExport(cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76));
        entity.setCrimeExportKey(cursor.isNull(offset + 77) ? null : cursor.getString(offset + 77));
        entity.setCrimeExportDesc(cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78));
        entity.setCrimePeopleFeature(cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79));
        entity.setCrimePeopleFeatureKey(cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80));
        entity.setCrimePeopleFeatureDesc(cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81));
        entity.setCrimeFeature(cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82));
        entity.setCrimeFeatureKey(cursor.isNull(offset + 83) ? null : cursor.getString(offset + 83));
        entity.setCrimeFeatureDesc(cursor.isNull(offset + 84) ? null : cursor.getString(offset + 84));
        entity.setIntrusiveMethod(cursor.isNull(offset + 85) ? null : cursor.getString(offset + 85));
        entity.setIntrusiveMethodKey(cursor.isNull(offset + 86) ? null : cursor.getString(offset + 86));
        entity.setIntrusiveMethodDesc(cursor.isNull(offset + 87) ? null : cursor.getString(offset + 87));
        entity.setSelectLocation(cursor.isNull(offset + 88) ? null : cursor.getString(offset + 88));
        entity.setSelectLocationKey(cursor.isNull(offset + 89) ? null : cursor.getString(offset + 89));
        entity.setSelectLocationDesc(cursor.isNull(offset + 90) ? null : cursor.getString(offset + 90));
        entity.setCrimePurpose(cursor.isNull(offset + 91) ? null : cursor.getString(offset + 91));
        entity.setCrimePurposeKey(cursor.isNull(offset + 92) ? null : cursor.getString(offset + 92));
        entity.setCrimePurposeDesc(cursor.isNull(offset + 93) ? null : cursor.getString(offset + 93));
        entity.setRev1(cursor.isNull(offset + 94) ? null : cursor.getString(offset + 94));
        entity.setRev2(cursor.isNull(offset + 95) ? null : cursor.getString(offset + 95));
        entity.setRev3(cursor.isNull(offset + 96) ? null : cursor.getString(offset + 96));
        entity.setRev4(cursor.isNull(offset + 97) ? null : cursor.getString(offset + 97));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CrimeItem entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CrimeItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CrimeItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
