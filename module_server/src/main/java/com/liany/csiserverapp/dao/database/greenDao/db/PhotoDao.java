package com.liany.csiserverapp.dao.database.greenDao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.liany.csiserverapp.diagnose.Photo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO".
*/
public class PhotoDao extends AbstractDao<Photo, String> {

    public static final String TABLENAME = "PHOTO";

    /**
     * Properties of entity Photo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ParentId = new Property(1, String.class, "parentId", false, "PARENT_ID");
        public final static Property CrimeId = new Property(2, String.class, "crimeId", false, "CRIME_ID");
        public final static Property Path = new Property(3, String.class, "path", false, "PATH");
        public final static Property ServerPath = new Property(4, String.class, "serverPath", false, "SERVER_PATH");
        public final static Property PhotoInfo = new Property(5, String.class, "photoInfo", false, "PHOTO_INFO");
        public final static Property Width = new Property(6, String.class, "width", false, "WIDTH");
        public final static Property Height = new Property(7, String.class, "height", false, "HEIGHT");
        public final static Property FileName = new Property(8, String.class, "fileName", false, "FILE_NAME");
        public final static Property Type = new Property(9, String.class, "type", false, "TYPE");
        public final static Property UUID = new Property(10, String.class, "UUID", false, "UUID");
        public final static Property State = new Property(11, String.class, "state", false, "STATE");
        public final static Property IsUpload = new Property(12, int.class, "isUpload", false, "IS_UPLOAD");
        public final static Property IsDelete = new Property(13, int.class, "isDelete", false, "IS_DELETE");
        public final static Property Rev1 = new Property(14, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(15, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(16, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(17, String.class, "rev4", false, "REV4");
    }

    private Query<Photo> contactsEntity_PhotosQuery;
    private Query<Photo> crimeItem_PositionItemQuery;
    private Query<Photo> crimeItem_FlatItemQuery;
    private Query<Photo> crimeItem_DwgItemQuery;
    private Query<Photo> crimeItem_PositionPhotoItemQuery;
    private Query<Photo> crimeItem_OverviewPhotoItemQuery;
    private Query<Photo> crimeItem_ImportantPhotoItemQuery;
    private Query<Photo> crimeItem_DetailPhotoItemQuery;
    private Query<Photo> crimeItem_MonitoringPhotoItemQuery;
    private Query<Photo> crimeItem_CameraPhotoItemQuery;
    private Query<Photo> goodEntity_PhotosQuery;

    public PhotoDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"PARENT_ID\" TEXT," + // 1: parentId
                "\"CRIME_ID\" TEXT," + // 2: crimeId
                "\"PATH\" TEXT," + // 3: path
                "\"SERVER_PATH\" TEXT," + // 4: serverPath
                "\"PHOTO_INFO\" TEXT," + // 5: photoInfo
                "\"WIDTH\" TEXT," + // 6: width
                "\"HEIGHT\" TEXT," + // 7: height
                "\"FILE_NAME\" TEXT," + // 8: fileName
                "\"TYPE\" TEXT," + // 9: type
                "\"UUID\" TEXT," + // 10: UUID
                "\"STATE\" TEXT," + // 11: state
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 12: isUpload
                "\"IS_DELETE\" INTEGER NOT NULL ," + // 13: isDelete
                "\"REV1\" TEXT," + // 14: rev1
                "\"REV2\" TEXT," + // 15: rev2
                "\"REV3\" TEXT," + // 16: rev3
                "\"REV4\" TEXT);"); // 17: rev4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Photo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(2, parentId);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(3, crimeId);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
 
        String serverPath = entity.getServerPath();
        if (serverPath != null) {
            stmt.bindString(5, serverPath);
        }
 
        String photoInfo = entity.getPhotoInfo();
        if (photoInfo != null) {
            stmt.bindString(6, photoInfo);
        }
 
        String width = entity.getWidth();
        if (width != null) {
            stmt.bindString(7, width);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(8, height);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(9, fileName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(11, UUID);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(12, state);
        }
        stmt.bindLong(13, entity.getIsUpload());
        stmt.bindLong(14, entity.getIsDelete());
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(15, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(16, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(17, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(18, rev4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Photo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(2, parentId);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(3, crimeId);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
 
        String serverPath = entity.getServerPath();
        if (serverPath != null) {
            stmt.bindString(5, serverPath);
        }
 
        String photoInfo = entity.getPhotoInfo();
        if (photoInfo != null) {
            stmt.bindString(6, photoInfo);
        }
 
        String width = entity.getWidth();
        if (width != null) {
            stmt.bindString(7, width);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(8, height);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(9, fileName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(11, UUID);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(12, state);
        }
        stmt.bindLong(13, entity.getIsUpload());
        stmt.bindLong(14, entity.getIsDelete());
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(15, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(16, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(17, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(18, rev4);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Photo readEntity(Cursor cursor, int offset) {
        Photo entity = new Photo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // parentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // crimeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // serverPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photoInfo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // width
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // height
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fileName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // UUID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // state
            cursor.getInt(offset + 12), // isUpload
            cursor.getInt(offset + 13), // isDelete
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // rev1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // rev2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // rev3
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // rev4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Photo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setParentId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCrimeId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setServerPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhotoInfo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWidth(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHeight(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFileName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUUID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setState(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsUpload(cursor.getInt(offset + 12));
        entity.setIsDelete(cursor.getInt(offset + 13));
        entity.setRev1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRev2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRev3(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRev4(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Photo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Photo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Photo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "photos" to-many relationship of ContactsEntity. */
    public List<Photo> _queryContactsEntity_Photos(String parentId) {
        synchronized (this) {
            if (contactsEntity_PhotosQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                contactsEntity_PhotosQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = contactsEntity_PhotosQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

    /** Internal query to resolve the "positionItem" to-many relationship of CrimeItem. */
    public List<Photo> _queryCrimeItem_PositionItem(String id) {
        synchronized (this) {
            if (crimeItem_PositionItemQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_PositionItemQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = crimeItem_PositionItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "flatItem" to-many relationship of CrimeItem. */
    public List<Photo> _queryCrimeItem_FlatItem(String id) {
        synchronized (this) {
            if (crimeItem_FlatItemQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_FlatItemQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = crimeItem_FlatItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "dwgItem" to-many relationship of CrimeItem. */
    public List<Photo> _queryCrimeItem_DwgItem(String id) {
        synchronized (this) {
            if (crimeItem_DwgItemQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_DwgItemQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = crimeItem_DwgItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "positionPhotoItem" to-many relationship of CrimeItem. */
    public List<Photo> _queryCrimeItem_PositionPhotoItem(String id) {
        synchronized (this) {
            if (crimeItem_PositionPhotoItemQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_PositionPhotoItemQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = crimeItem_PositionPhotoItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "overviewPhotoItem" to-many relationship of CrimeItem. */
    public List<Photo> _queryCrimeItem_OverviewPhotoItem(String id) {
        synchronized (this) {
            if (crimeItem_OverviewPhotoItemQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_OverviewPhotoItemQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = crimeItem_OverviewPhotoItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "importantPhotoItem" to-many relationship of CrimeItem. */
    public List<Photo> _queryCrimeItem_ImportantPhotoItem(String id) {
        synchronized (this) {
            if (crimeItem_ImportantPhotoItemQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_ImportantPhotoItemQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = crimeItem_ImportantPhotoItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "detailPhotoItem" to-many relationship of CrimeItem. */
    public List<Photo> _queryCrimeItem_DetailPhotoItem(String id) {
        synchronized (this) {
            if (crimeItem_DetailPhotoItemQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_DetailPhotoItemQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = crimeItem_DetailPhotoItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "monitoringPhotoItem" to-many relationship of CrimeItem. */
    public List<Photo> _queryCrimeItem_MonitoringPhotoItem(String id) {
        synchronized (this) {
            if (crimeItem_MonitoringPhotoItemQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_MonitoringPhotoItemQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = crimeItem_MonitoringPhotoItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "cameraPhotoItem" to-many relationship of CrimeItem. */
    public List<Photo> _queryCrimeItem_CameraPhotoItem(String id) {
        synchronized (this) {
            if (crimeItem_CameraPhotoItemQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_CameraPhotoItemQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = crimeItem_CameraPhotoItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    /** Internal query to resolve the "photos" to-many relationship of GoodEntity. */
    public List<Photo> _queryGoodEntity_Photos(String parentId) {
        synchronized (this) {
            if (goodEntity_PhotosQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                goodEntity_PhotosQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = goodEntity_PhotosQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

}
