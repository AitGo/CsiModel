package com.liany.csiserverapp.dao.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liany.csiserverapp.diagnose.Alarm;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "alarm".
*/
public class AlarmDao extends AbstractDao<Alarm, String> {

    public static final String TABLENAME = "alarm";

    /**
     * Properties of entity Alarm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property AlarmNo = new Property(1, String.class, "alarmNo", false, "ALARM_NO");
        public final static Property AlarmName = new Property(2, String.class, "alarmName", false, "ALARM_NAME");
        public final static Property AlarmDate = new Property(3, String.class, "alarmDate", false, "ALARM_DATE");
        public final static Property CaseType = new Property(4, String.class, "caseType", false, "CASE_TYPE");
        public final static Property OccurPlace = new Property(5, String.class, "occurPlace", false, "OCCUR_PLACE");
        public final static Property AlarmType = new Property(6, String.class, "alarmType", false, "ALARM_TYPE");
        public final static Property ReportName = new Property(7, String.class, "reportName", false, "REPORT_NAME");
        public final static Property ReportPhone = new Property(8, String.class, "reportPhone", false, "REPORT_PHONE");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
        public final static Property AlarmUnit = new Property(10, String.class, "alarmUnit", false, "ALARM_UNIT");
        public final static Property AlarmUnitName = new Property(11, String.class, "alarmUnitName", false, "ALARM_UNIT_NAME");
        public final static Property AlarmFromDate = new Property(12, String.class, "alarmFromDate", false, "ALARM_FROM_DATE");
        public final static Property AlarmToDate = new Property(13, String.class, "alarmToDate", false, "ALARM_TO_DATE");
    }


    public AlarmDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"alarm\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"ALARM_NO\" TEXT," + // 1: alarmNo
                "\"ALARM_NAME\" TEXT," + // 2: alarmName
                "\"ALARM_DATE\" TEXT," + // 3: alarmDate
                "\"CASE_TYPE\" TEXT," + // 4: caseType
                "\"OCCUR_PLACE\" TEXT," + // 5: occurPlace
                "\"ALARM_TYPE\" TEXT," + // 6: alarmType
                "\"REPORT_NAME\" TEXT," + // 7: reportName
                "\"REPORT_PHONE\" TEXT," + // 8: reportPhone
                "\"REMARK\" TEXT," + // 9: remark
                "\"ALARM_UNIT\" TEXT," + // 10: alarmUnit
                "\"ALARM_UNIT_NAME\" TEXT," + // 11: alarmUnitName
                "\"ALARM_FROM_DATE\" TEXT," + // 12: alarmFromDate
                "\"ALARM_TO_DATE\" TEXT);"); // 13: alarmToDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"alarm\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Alarm entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String alarmNo = entity.getAlarmNo();
        if (alarmNo != null) {
            stmt.bindString(2, alarmNo);
        }
 
        String alarmName = entity.getAlarmName();
        if (alarmName != null) {
            stmt.bindString(3, alarmName);
        }
 
        String alarmDate = entity.getAlarmDate();
        if (alarmDate != null) {
            stmt.bindString(4, alarmDate);
        }
 
        String caseType = entity.getCaseType();
        if (caseType != null) {
            stmt.bindString(5, caseType);
        }
 
        String occurPlace = entity.getOccurPlace();
        if (occurPlace != null) {
            stmt.bindString(6, occurPlace);
        }
 
        String alarmType = entity.getAlarmType();
        if (alarmType != null) {
            stmt.bindString(7, alarmType);
        }
 
        String reportName = entity.getReportName();
        if (reportName != null) {
            stmt.bindString(8, reportName);
        }
 
        String reportPhone = entity.getReportPhone();
        if (reportPhone != null) {
            stmt.bindString(9, reportPhone);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String alarmUnit = entity.getAlarmUnit();
        if (alarmUnit != null) {
            stmt.bindString(11, alarmUnit);
        }
 
        String alarmUnitName = entity.getAlarmUnitName();
        if (alarmUnitName != null) {
            stmt.bindString(12, alarmUnitName);
        }
 
        String alarmFromDate = entity.getAlarmFromDate();
        if (alarmFromDate != null) {
            stmt.bindString(13, alarmFromDate);
        }
 
        String alarmToDate = entity.getAlarmToDate();
        if (alarmToDate != null) {
            stmt.bindString(14, alarmToDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Alarm entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String alarmNo = entity.getAlarmNo();
        if (alarmNo != null) {
            stmt.bindString(2, alarmNo);
        }
 
        String alarmName = entity.getAlarmName();
        if (alarmName != null) {
            stmt.bindString(3, alarmName);
        }
 
        String alarmDate = entity.getAlarmDate();
        if (alarmDate != null) {
            stmt.bindString(4, alarmDate);
        }
 
        String caseType = entity.getCaseType();
        if (caseType != null) {
            stmt.bindString(5, caseType);
        }
 
        String occurPlace = entity.getOccurPlace();
        if (occurPlace != null) {
            stmt.bindString(6, occurPlace);
        }
 
        String alarmType = entity.getAlarmType();
        if (alarmType != null) {
            stmt.bindString(7, alarmType);
        }
 
        String reportName = entity.getReportName();
        if (reportName != null) {
            stmt.bindString(8, reportName);
        }
 
        String reportPhone = entity.getReportPhone();
        if (reportPhone != null) {
            stmt.bindString(9, reportPhone);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String alarmUnit = entity.getAlarmUnit();
        if (alarmUnit != null) {
            stmt.bindString(11, alarmUnit);
        }
 
        String alarmUnitName = entity.getAlarmUnitName();
        if (alarmUnitName != null) {
            stmt.bindString(12, alarmUnitName);
        }
 
        String alarmFromDate = entity.getAlarmFromDate();
        if (alarmFromDate != null) {
            stmt.bindString(13, alarmFromDate);
        }
 
        String alarmToDate = entity.getAlarmToDate();
        if (alarmToDate != null) {
            stmt.bindString(14, alarmToDate);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Alarm readEntity(Cursor cursor, int offset) {
        Alarm entity = new Alarm( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // alarmNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alarmName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alarmDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // caseType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // occurPlace
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // alarmType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // reportName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // reportPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // remark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // alarmUnit
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // alarmUnitName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // alarmFromDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // alarmToDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Alarm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAlarmNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlarmName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlarmDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCaseType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOccurPlace(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlarmType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReportName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReportPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAlarmUnit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAlarmUnitName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAlarmFromDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAlarmToDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Alarm entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Alarm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Alarm entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
