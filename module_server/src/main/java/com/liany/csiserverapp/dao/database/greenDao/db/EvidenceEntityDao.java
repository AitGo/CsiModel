package com.liany.csiserverapp.dao.database.greenDao.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.liany.csiserverapp.diagnose.Photo;

import com.liany.csiserverapp.diagnose.EvidenceEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "evidence".
*/
public class EvidenceEntityDao extends AbstractDao<EvidenceEntity, String> {

    public static final String TABLENAME = "evidence";

    /**
     * Properties of entity EvidenceEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CrimeId = new Property(1, String.class, "crimeId", false, "CRIME_ID");
        public final static Property EvidenceCategory = new Property(2, String.class, "evidenceCategory", false, "EVIDENCE_CATEGORY");
        public final static Property EvidenceCategoryKey = new Property(3, String.class, "evidenceCategoryKey", false, "EVIDENCE_CATEGORY_KEY");
        public final static Property Evidence = new Property(4, String.class, "evidence", false, "EVIDENCE");
        public final static Property EvidenceKey = new Property(5, String.class, "evidenceKey", false, "EVIDENCE_KEY");
        public final static Property EvidenceName = new Property(6, String.class, "evidenceName", false, "EVIDENCE_NAME");
        public final static Property LegacySite = new Property(7, String.class, "legacySite", false, "LEGACY_SITE");
        public final static Property BasiceFeature = new Property(8, String.class, "basiceFeature", false, "BASICE_FEATURE");
        public final static Property Infer = new Property(9, String.class, "infer", false, "INFER");
        public final static Property InferKey = new Property(10, String.class, "inferKey", false, "INFER_KEY");
        public final static Property Method = new Property(11, String.class, "method", false, "METHOD");
        public final static Property MethodKey = new Property(12, String.class, "methodKey", false, "METHOD_KEY");
        public final static Property Time = new Property(13, long.class, "time", false, "TIME");
        public final static Property People = new Property(14, String.class, "people", false, "PEOPLE");
        public final static Property PeopleKey = new Property(15, String.class, "peopleKey", false, "PEOPLE_KEY");
        public final static Property PhotoId = new Property(16, String.class, "photoId", false, "PHOTO_ID");
        public final static Property Rev1 = new Property(17, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(18, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(19, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(20, String.class, "rev4", false, "REV4");
    }

    private DaoSession daoSession;

    private Query<EvidenceEntity> crimeItem_EvidenceItemQuery;

    public EvidenceEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EvidenceEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"evidence\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CRIME_ID\" TEXT," + // 1: crimeId
                "\"EVIDENCE_CATEGORY\" TEXT," + // 2: evidenceCategory
                "\"EVIDENCE_CATEGORY_KEY\" TEXT," + // 3: evidenceCategoryKey
                "\"EVIDENCE\" TEXT," + // 4: evidence
                "\"EVIDENCE_KEY\" TEXT," + // 5: evidenceKey
                "\"EVIDENCE_NAME\" TEXT," + // 6: evidenceName
                "\"LEGACY_SITE\" TEXT," + // 7: legacySite
                "\"BASICE_FEATURE\" TEXT," + // 8: basiceFeature
                "\"INFER\" TEXT," + // 9: infer
                "\"INFER_KEY\" TEXT," + // 10: inferKey
                "\"METHOD\" TEXT," + // 11: method
                "\"METHOD_KEY\" TEXT," + // 12: methodKey
                "\"TIME\" INTEGER NOT NULL ," + // 13: time
                "\"PEOPLE\" TEXT," + // 14: people
                "\"PEOPLE_KEY\" TEXT," + // 15: peopleKey
                "\"PHOTO_ID\" TEXT," + // 16: photoId
                "\"REV1\" TEXT," + // 17: rev1
                "\"REV2\" TEXT," + // 18: rev2
                "\"REV3\" TEXT," + // 19: rev3
                "\"REV4\" TEXT);"); // 20: rev4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"evidence\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvidenceEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String evidenceCategory = entity.getEvidenceCategory();
        if (evidenceCategory != null) {
            stmt.bindString(3, evidenceCategory);
        }
 
        String evidenceCategoryKey = entity.getEvidenceCategoryKey();
        if (evidenceCategoryKey != null) {
            stmt.bindString(4, evidenceCategoryKey);
        }
 
        String evidence = entity.getEvidence();
        if (evidence != null) {
            stmt.bindString(5, evidence);
        }
 
        String evidenceKey = entity.getEvidenceKey();
        if (evidenceKey != null) {
            stmt.bindString(6, evidenceKey);
        }
 
        String evidenceName = entity.getEvidenceName();
        if (evidenceName != null) {
            stmt.bindString(7, evidenceName);
        }
 
        String legacySite = entity.getLegacySite();
        if (legacySite != null) {
            stmt.bindString(8, legacySite);
        }
 
        String basiceFeature = entity.getBasiceFeature();
        if (basiceFeature != null) {
            stmt.bindString(9, basiceFeature);
        }
 
        String infer = entity.getInfer();
        if (infer != null) {
            stmt.bindString(10, infer);
        }
 
        String inferKey = entity.getInferKey();
        if (inferKey != null) {
            stmt.bindString(11, inferKey);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(12, method);
        }
 
        String methodKey = entity.getMethodKey();
        if (methodKey != null) {
            stmt.bindString(13, methodKey);
        }
        stmt.bindLong(14, entity.getTime());
 
        String people = entity.getPeople();
        if (people != null) {
            stmt.bindString(15, people);
        }
 
        String peopleKey = entity.getPeopleKey();
        if (peopleKey != null) {
            stmt.bindString(16, peopleKey);
        }
 
        String photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindString(17, photoId);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(18, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(19, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(20, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(21, rev4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvidenceEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String evidenceCategory = entity.getEvidenceCategory();
        if (evidenceCategory != null) {
            stmt.bindString(3, evidenceCategory);
        }
 
        String evidenceCategoryKey = entity.getEvidenceCategoryKey();
        if (evidenceCategoryKey != null) {
            stmt.bindString(4, evidenceCategoryKey);
        }
 
        String evidence = entity.getEvidence();
        if (evidence != null) {
            stmt.bindString(5, evidence);
        }
 
        String evidenceKey = entity.getEvidenceKey();
        if (evidenceKey != null) {
            stmt.bindString(6, evidenceKey);
        }
 
        String evidenceName = entity.getEvidenceName();
        if (evidenceName != null) {
            stmt.bindString(7, evidenceName);
        }
 
        String legacySite = entity.getLegacySite();
        if (legacySite != null) {
            stmt.bindString(8, legacySite);
        }
 
        String basiceFeature = entity.getBasiceFeature();
        if (basiceFeature != null) {
            stmt.bindString(9, basiceFeature);
        }
 
        String infer = entity.getInfer();
        if (infer != null) {
            stmt.bindString(10, infer);
        }
 
        String inferKey = entity.getInferKey();
        if (inferKey != null) {
            stmt.bindString(11, inferKey);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(12, method);
        }
 
        String methodKey = entity.getMethodKey();
        if (methodKey != null) {
            stmt.bindString(13, methodKey);
        }
        stmt.bindLong(14, entity.getTime());
 
        String people = entity.getPeople();
        if (people != null) {
            stmt.bindString(15, people);
        }
 
        String peopleKey = entity.getPeopleKey();
        if (peopleKey != null) {
            stmt.bindString(16, peopleKey);
        }
 
        String photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindString(17, photoId);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(18, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(19, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(20, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(21, rev4);
        }
    }

    @Override
    protected final void attachEntity(EvidenceEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public EvidenceEntity readEntity(Cursor cursor, int offset) {
        EvidenceEntity entity = new EvidenceEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crimeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // evidenceCategory
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // evidenceCategoryKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // evidence
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // evidenceKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // evidenceName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // legacySite
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // basiceFeature
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // infer
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // inferKey
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // method
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // methodKey
            cursor.getLong(offset + 13), // time
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // people
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // peopleKey
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // photoId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // rev1
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // rev2
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // rev3
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // rev4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvidenceEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCrimeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEvidenceCategory(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEvidenceCategoryKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEvidence(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEvidenceKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEvidenceName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLegacySite(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBasiceFeature(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInfer(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setInferKey(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMethod(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMethodKey(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTime(cursor.getLong(offset + 13));
        entity.setPeople(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPeopleKey(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPhotoId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRev1(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRev2(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRev3(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRev4(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final String updateKeyAfterInsert(EvidenceEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(EvidenceEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvidenceEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "evidenceItem" to-many relationship of CrimeItem. */
    public List<EvidenceEntity> _queryCrimeItem_EvidenceItem(String id) {
        synchronized (this) {
            if (crimeItem_EvidenceItemQuery == null) {
                QueryBuilder<EvidenceEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_EvidenceItemQuery = queryBuilder.build();
            }
        }
        Query<EvidenceEntity> query = crimeItem_EvidenceItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPhotoDao().getAllColumns());
            builder.append(" FROM evidence T");
            builder.append(" LEFT JOIN PHOTO T0 ON T.\"PHOTO_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected EvidenceEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        EvidenceEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Photo photo = loadCurrentOther(daoSession.getPhotoDao(), cursor, offset);
        entity.setPhoto(photo);

        return entity;    
    }

    public EvidenceEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<EvidenceEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<EvidenceEntity> list = new ArrayList<EvidenceEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<EvidenceEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<EvidenceEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
