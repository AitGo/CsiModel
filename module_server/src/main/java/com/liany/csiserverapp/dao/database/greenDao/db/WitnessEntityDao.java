package com.liany.csiserverapp.dao.database.greenDao.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.liany.csiserverapp.diagnose.Photo;

import com.liany.csiserverapp.diagnose.WitnessEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "witness".
*/
public class WitnessEntityDao extends AbstractDao<WitnessEntity, String> {

    public static final String TABLENAME = "witness";

    /**
     * Properties of entity WitnessEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CrimeId = new Property(1, String.class, "crimeId", false, "CRIME_ID");
        public final static Property WitnessName = new Property(2, String.class, "witnessName", false, "WITNESS_NAME");
        public final static Property WitnessSex = new Property(3, String.class, "witnessSex", false, "WITNESS_SEX");
        public final static Property WitnessSexKey = new Property(4, String.class, "witnessSexKey", false, "WITNESS_SEX_KEY");
        public final static Property WitnessBirthday = new Property(5, String.class, "witnessBirthday", false, "WITNESS_BIRTHDAY");
        public final static Property WitnessNumber = new Property(6, String.class, "witnessNumber", false, "WITNESS_NUMBER");
        public final static Property WitnessAddress = new Property(7, String.class, "witnessAddress", false, "WITNESS_ADDRESS");
        public final static Property PhotoId = new Property(8, String.class, "photoId", false, "PHOTO_ID");
        public final static Property Rev1 = new Property(9, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(10, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(11, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(12, String.class, "rev4", false, "REV4");
    }

    private DaoSession daoSession;

    private Query<WitnessEntity> crimeItem_WitnessItemQuery;

    public WitnessEntityDao(DaoConfig config) {
        super(config);
    }
    
    public WitnessEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"witness\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CRIME_ID\" TEXT," + // 1: crimeId
                "\"WITNESS_NAME\" TEXT," + // 2: witnessName
                "\"WITNESS_SEX\" TEXT," + // 3: witnessSex
                "\"WITNESS_SEX_KEY\" TEXT," + // 4: witnessSexKey
                "\"WITNESS_BIRTHDAY\" TEXT," + // 5: witnessBirthday
                "\"WITNESS_NUMBER\" TEXT," + // 6: witnessNumber
                "\"WITNESS_ADDRESS\" TEXT," + // 7: witnessAddress
                "\"PHOTO_ID\" TEXT," + // 8: photoId
                "\"REV1\" TEXT," + // 9: rev1
                "\"REV2\" TEXT," + // 10: rev2
                "\"REV3\" TEXT," + // 11: rev3
                "\"REV4\" TEXT);"); // 12: rev4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"witness\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WitnessEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String witnessName = entity.getWitnessName();
        if (witnessName != null) {
            stmt.bindString(3, witnessName);
        }
 
        String witnessSex = entity.getWitnessSex();
        if (witnessSex != null) {
            stmt.bindString(4, witnessSex);
        }
 
        String witnessSexKey = entity.getWitnessSexKey();
        if (witnessSexKey != null) {
            stmt.bindString(5, witnessSexKey);
        }
 
        String witnessBirthday = entity.getWitnessBirthday();
        if (witnessBirthday != null) {
            stmt.bindString(6, witnessBirthday);
        }
 
        String witnessNumber = entity.getWitnessNumber();
        if (witnessNumber != null) {
            stmt.bindString(7, witnessNumber);
        }
 
        String witnessAddress = entity.getWitnessAddress();
        if (witnessAddress != null) {
            stmt.bindString(8, witnessAddress);
        }
 
        String photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindString(9, photoId);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(10, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(11, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(12, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(13, rev4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WitnessEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String witnessName = entity.getWitnessName();
        if (witnessName != null) {
            stmt.bindString(3, witnessName);
        }
 
        String witnessSex = entity.getWitnessSex();
        if (witnessSex != null) {
            stmt.bindString(4, witnessSex);
        }
 
        String witnessSexKey = entity.getWitnessSexKey();
        if (witnessSexKey != null) {
            stmt.bindString(5, witnessSexKey);
        }
 
        String witnessBirthday = entity.getWitnessBirthday();
        if (witnessBirthday != null) {
            stmt.bindString(6, witnessBirthday);
        }
 
        String witnessNumber = entity.getWitnessNumber();
        if (witnessNumber != null) {
            stmt.bindString(7, witnessNumber);
        }
 
        String witnessAddress = entity.getWitnessAddress();
        if (witnessAddress != null) {
            stmt.bindString(8, witnessAddress);
        }
 
        String photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindString(9, photoId);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(10, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(11, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(12, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(13, rev4);
        }
    }

    @Override
    protected final void attachEntity(WitnessEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public WitnessEntity readEntity(Cursor cursor, int offset) {
        WitnessEntity entity = new WitnessEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crimeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // witnessName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // witnessSex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // witnessSexKey
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // witnessBirthday
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // witnessNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // witnessAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // photoId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rev1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rev2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // rev3
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // rev4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WitnessEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCrimeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWitnessName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWitnessSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWitnessSexKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWitnessBirthday(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWitnessNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWitnessAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhotoId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRev1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRev2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRev3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRev4(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(WitnessEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(WitnessEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WitnessEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "witnessItem" to-many relationship of CrimeItem. */
    public List<WitnessEntity> _queryCrimeItem_WitnessItem(String id) {
        synchronized (this) {
            if (crimeItem_WitnessItemQuery == null) {
                QueryBuilder<WitnessEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_WitnessItemQuery = queryBuilder.build();
            }
        }
        Query<WitnessEntity> query = crimeItem_WitnessItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPhotoDao().getAllColumns());
            builder.append(" FROM witness T");
            builder.append(" LEFT JOIN PHOTO T0 ON T.\"PHOTO_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected WitnessEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        WitnessEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Photo photo = loadCurrentOther(daoSession.getPhotoDao(), cursor, offset);
        entity.setPhoto(photo);

        return entity;    
    }

    public WitnessEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<WitnessEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<WitnessEntity> list = new ArrayList<WitnessEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<WitnessEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<WitnessEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
