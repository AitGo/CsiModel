package com.liany.csiserverapp.dao.database.greenDao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.liany.csiserverapp.diagnose.ToolEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tool".
*/
public class ToolEntityDao extends AbstractDao<ToolEntity, String> {

    public static final String TABLENAME = "tool";

    /**
     * Properties of entity ToolEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CrimeId = new Property(1, String.class, "crimeId", false, "CRIME_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property CategoryKey = new Property(4, String.class, "categoryKey", false, "CATEGORY_KEY");
        public final static Property Source = new Property(5, String.class, "source", false, "SOURCE");
        public final static Property SourceKey = new Property(6, String.class, "sourceKey", false, "SOURCE_KEY");
    }

    private Query<ToolEntity> crimeItem_CrimeToolItemQuery;

    public ToolEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ToolEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tool\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CRIME_ID\" TEXT," + // 1: crimeId
                "\"NAME\" TEXT," + // 2: name
                "\"CATEGORY\" TEXT," + // 3: category
                "\"CATEGORY_KEY\" TEXT," + // 4: categoryKey
                "\"SOURCE\" TEXT," + // 5: source
                "\"SOURCE_KEY\" TEXT);"); // 6: sourceKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tool\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ToolEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String categoryKey = entity.getCategoryKey();
        if (categoryKey != null) {
            stmt.bindString(5, categoryKey);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        String sourceKey = entity.getSourceKey();
        if (sourceKey != null) {
            stmt.bindString(7, sourceKey);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ToolEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String categoryKey = entity.getCategoryKey();
        if (categoryKey != null) {
            stmt.bindString(5, categoryKey);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        String sourceKey = entity.getSourceKey();
        if (sourceKey != null) {
            stmt.bindString(7, sourceKey);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ToolEntity readEntity(Cursor cursor, int offset) {
        ToolEntity entity = new ToolEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crimeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // categoryKey
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // source
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // sourceKey
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ToolEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCrimeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategoryKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSource(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSourceKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ToolEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ToolEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ToolEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "crimeToolItem" to-many relationship of CrimeItem. */
    public List<ToolEntity> _queryCrimeItem_CrimeToolItem(String id) {
        synchronized (this) {
            if (crimeItem_CrimeToolItemQuery == null) {
                QueryBuilder<ToolEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_CrimeToolItemQuery = queryBuilder.build();
            }
        }
        Query<ToolEntity> query = crimeItem_CrimeToolItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
