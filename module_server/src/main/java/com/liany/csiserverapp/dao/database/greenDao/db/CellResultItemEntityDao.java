package com.liany.csiserverapp.dao.database.greenDao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.liany.csiserverapp.diagnose.CellResultItemEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "cellResultItem".
*/
public class CellResultItemEntityDao extends AbstractDao<CellResultItemEntity, String> {

    public static final String TABLENAME = "cellResultItem";

    /**
     * Properties of entity CellResultItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CrimeId = new Property(1, String.class, "crimeId", false, "CRIME_ID");
        public final static Property PhotoPath = new Property(2, String.class, "photoPath", false, "PHOTO_PATH");
        public final static Property PhotoInfo = new Property(3, String.class, "photoInfo", false, "PHOTO_INFO");
    }

    private Query<CellResultItemEntity> crimeItem_CellResultItemQuery;

    public CellResultItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CellResultItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"cellResultItem\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CRIME_ID\" TEXT," + // 1: crimeId
                "\"PHOTO_PATH\" TEXT," + // 2: photoPath
                "\"PHOTO_INFO\" TEXT);"); // 3: photoInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"cellResultItem\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CellResultItemEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(3, photoPath);
        }
 
        String photoInfo = entity.getPhotoInfo();
        if (photoInfo != null) {
            stmt.bindString(4, photoInfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CellResultItemEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(3, photoPath);
        }
 
        String photoInfo = entity.getPhotoInfo();
        if (photoInfo != null) {
            stmt.bindString(4, photoInfo);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CellResultItemEntity readEntity(Cursor cursor, int offset) {
        CellResultItemEntity entity = new CellResultItemEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crimeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // photoPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // photoInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CellResultItemEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCrimeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhotoPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhotoInfo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CellResultItemEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CellResultItemEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CellResultItemEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cellResultItem" to-many relationship of CrimeItem. */
    public List<CellResultItemEntity> _queryCrimeItem_CellResultItem(String id) {
        synchronized (this) {
            if (crimeItem_CellResultItemQuery == null) {
                QueryBuilder<CellResultItemEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_CellResultItemQuery = queryBuilder.build();
            }
        }
        Query<CellResultItemEntity> query = crimeItem_CellResultItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
