package com.liany.csiserverapp.dao.database.greenDao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.liany.csiserverapp.diagnose.ItemEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "item".
*/
public class ItemEntityDao extends AbstractDao<ItemEntity, String> {

    public static final String TABLENAME = "item";

    /**
     * Properties of entity ItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CrimeId = new Property(1, String.class, "crimeId", false, "CRIME_ID");
        public final static Property ItemName = new Property(2, String.class, "itemName", false, "ITEM_NAME");
        public final static Property BrandModel = new Property(3, String.class, "brandModel", false, "BRAND_MODEL");
        public final static Property Amount = new Property(4, String.class, "amount", false, "AMOUNT");
        public final static Property Value = new Property(5, String.class, "value", false, "VALUE");
        public final static Property FeatureDescription = new Property(6, String.class, "featureDescription", false, "FEATURE_DESCRIPTION");
    }

    private Query<ItemEntity> crimeItem_LostItemQuery;

    public ItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"item\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CRIME_ID\" TEXT," + // 1: crimeId
                "\"ITEM_NAME\" TEXT," + // 2: itemName
                "\"BRAND_MODEL\" TEXT," + // 3: brandModel
                "\"AMOUNT\" TEXT," + // 4: amount
                "\"VALUE\" TEXT," + // 5: value
                "\"FEATURE_DESCRIPTION\" TEXT);"); // 6: featureDescription
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"item\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ItemEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(3, itemName);
        }
 
        String brandModel = entity.getBrandModel();
        if (brandModel != null) {
            stmt.bindString(4, brandModel);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(5, amount);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(6, value);
        }
 
        String featureDescription = entity.getFeatureDescription();
        if (featureDescription != null) {
            stmt.bindString(7, featureDescription);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ItemEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(3, itemName);
        }
 
        String brandModel = entity.getBrandModel();
        if (brandModel != null) {
            stmt.bindString(4, brandModel);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(5, amount);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(6, value);
        }
 
        String featureDescription = entity.getFeatureDescription();
        if (featureDescription != null) {
            stmt.bindString(7, featureDescription);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ItemEntity readEntity(Cursor cursor, int offset) {
        ItemEntity entity = new ItemEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crimeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itemName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // brandModel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // amount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // value
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // featureDescription
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ItemEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCrimeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrandModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAmount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFeatureDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ItemEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ItemEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ItemEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lostItem" to-many relationship of CrimeItem. */
    public List<ItemEntity> _queryCrimeItem_LostItem(String id) {
        synchronized (this) {
            if (crimeItem_LostItemQuery == null) {
                QueryBuilder<ItemEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_LostItemQuery = queryBuilder.build();
            }
        }
        Query<ItemEntity> query = crimeItem_LostItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
