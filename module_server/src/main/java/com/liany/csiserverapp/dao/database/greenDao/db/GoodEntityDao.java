package com.liany.csiserverapp.dao.database.greenDao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.liany.csiserverapp.diagnose.GoodEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "goodEntity".
*/
public class GoodEntityDao extends AbstractDao<GoodEntity, String> {

    public static final String TABLENAME = "goodEntity";

    /**
     * Properties of entity GoodEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CrimeId = new Property(1, String.class, "crimeId", false, "CRIME_ID");
        public final static Property CollectedName = new Property(2, String.class, "collectedName", false, "COLLECTED_NAME");
        public final static Property CollectedIds = new Property(3, String.class, "collectedIds", false, "COLLECTED_IDS");
        public final static Property MaterialName = new Property(4, String.class, "materialName", false, "MATERIAL_NAME");
        public final static Property CollectedPosition = new Property(5, String.class, "collectedPosition", false, "COLLECTED_POSITION");
        public final static Property CollectedMethod = new Property(6, String.class, "collectedMethod", false, "COLLECTED_METHOD");
        public final static Property CollectedNum = new Property(7, String.class, "collectedNum", false, "COLLECTED_NUM");
        public final static Property CollectedDate = new Property(8, String.class, "collectedDate", false, "COLLECTED_DATE");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
        public final static Property Code = new Property(10, String.class, "code", false, "CODE");
        public final static Property Rev1 = new Property(11, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(12, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(13, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(14, String.class, "rev4", false, "REV4");
    }

    private DaoSession daoSession;

    private Query<GoodEntity> crimeItem_GoodEntitiesQuery;

    public GoodEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GoodEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"goodEntity\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CRIME_ID\" TEXT," + // 1: crimeId
                "\"COLLECTED_NAME\" TEXT," + // 2: collectedName
                "\"COLLECTED_IDS\" TEXT," + // 3: collectedIds
                "\"MATERIAL_NAME\" TEXT," + // 4: materialName
                "\"COLLECTED_POSITION\" TEXT," + // 5: collectedPosition
                "\"COLLECTED_METHOD\" TEXT," + // 6: collectedMethod
                "\"COLLECTED_NUM\" TEXT," + // 7: collectedNum
                "\"COLLECTED_DATE\" TEXT," + // 8: collectedDate
                "\"REMARK\" TEXT," + // 9: remark
                "\"CODE\" TEXT," + // 10: code
                "\"REV1\" TEXT," + // 11: rev1
                "\"REV2\" TEXT," + // 12: rev2
                "\"REV3\" TEXT," + // 13: rev3
                "\"REV4\" TEXT);"); // 14: rev4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"goodEntity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String collectedName = entity.getCollectedName();
        if (collectedName != null) {
            stmt.bindString(3, collectedName);
        }
 
        String collectedIds = entity.getCollectedIds();
        if (collectedIds != null) {
            stmt.bindString(4, collectedIds);
        }
 
        String materialName = entity.getMaterialName();
        if (materialName != null) {
            stmt.bindString(5, materialName);
        }
 
        String collectedPosition = entity.getCollectedPosition();
        if (collectedPosition != null) {
            stmt.bindString(6, collectedPosition);
        }
 
        String collectedMethod = entity.getCollectedMethod();
        if (collectedMethod != null) {
            stmt.bindString(7, collectedMethod);
        }
 
        String collectedNum = entity.getCollectedNum();
        if (collectedNum != null) {
            stmt.bindString(8, collectedNum);
        }
 
        String collectedDate = entity.getCollectedDate();
        if (collectedDate != null) {
            stmt.bindString(9, collectedDate);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(11, code);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(12, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(13, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(14, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(15, rev4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String collectedName = entity.getCollectedName();
        if (collectedName != null) {
            stmt.bindString(3, collectedName);
        }
 
        String collectedIds = entity.getCollectedIds();
        if (collectedIds != null) {
            stmt.bindString(4, collectedIds);
        }
 
        String materialName = entity.getMaterialName();
        if (materialName != null) {
            stmt.bindString(5, materialName);
        }
 
        String collectedPosition = entity.getCollectedPosition();
        if (collectedPosition != null) {
            stmt.bindString(6, collectedPosition);
        }
 
        String collectedMethod = entity.getCollectedMethod();
        if (collectedMethod != null) {
            stmt.bindString(7, collectedMethod);
        }
 
        String collectedNum = entity.getCollectedNum();
        if (collectedNum != null) {
            stmt.bindString(8, collectedNum);
        }
 
        String collectedDate = entity.getCollectedDate();
        if (collectedDate != null) {
            stmt.bindString(9, collectedDate);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(11, code);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(12, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(13, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(14, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(15, rev4);
        }
    }

    @Override
    protected final void attachEntity(GoodEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GoodEntity readEntity(Cursor cursor, int offset) {
        GoodEntity entity = new GoodEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crimeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // collectedName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // collectedIds
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // materialName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // collectedPosition
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // collectedMethod
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // collectedNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // collectedDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // remark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // code
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // rev1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // rev2
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // rev3
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // rev4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCrimeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCollectedName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCollectedIds(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaterialName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCollectedPosition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCollectedMethod(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCollectedNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCollectedDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRev1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRev2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRev3(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRev4(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GoodEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(GoodEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "goodEntities" to-many relationship of CrimeItem. */
    public List<GoodEntity> _queryCrimeItem_GoodEntities(String id) {
        synchronized (this) {
            if (crimeItem_GoodEntitiesQuery == null) {
                QueryBuilder<GoodEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_GoodEntitiesQuery = queryBuilder.build();
            }
        }
        Query<GoodEntity> query = crimeItem_GoodEntitiesQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
