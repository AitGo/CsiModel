package com.liany.csiserverapp.dao.database.greenDao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.liany.csiserverapp.diagnose.ContactsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "contacts".
*/
public class ContactsEntityDao extends AbstractDao<ContactsEntity, String> {

    public static final String TABLENAME = "contacts";

    /**
     * Properties of entity ContactsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CrimeId = new Property(1, String.class, "crimeId", false, "CRIME_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(4, String.class, "sex", false, "SEX");
        public final static Property SexKey = new Property(5, String.class, "sexKey", false, "SEX_KEY");
        public final static Property PeopleId = new Property(6, String.class, "peopleId", false, "PEOPLE_ID");
        public final static Property Tel = new Property(7, String.class, "tel", false, "TEL");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property Rev1 = new Property(9, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(10, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(11, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(12, String.class, "rev4", false, "REV4");
    }

    private DaoSession daoSession;

    private Query<ContactsEntity> crimeItem_ReleatedPeopleItemQuery;

    public ContactsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ContactsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"contacts\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CRIME_ID\" TEXT," + // 1: crimeId
                "\"TYPE\" TEXT," + // 2: type
                "\"NAME\" TEXT," + // 3: name
                "\"SEX\" TEXT," + // 4: sex
                "\"SEX_KEY\" TEXT," + // 5: sexKey
                "\"PEOPLE_ID\" TEXT," + // 6: peopleId
                "\"TEL\" TEXT," + // 7: tel
                "\"ADDRESS\" TEXT," + // 8: address
                "\"REV1\" TEXT," + // 9: rev1
                "\"REV2\" TEXT," + // 10: rev2
                "\"REV3\" TEXT," + // 11: rev3
                "\"REV4\" TEXT);"); // 12: rev4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"contacts\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactsEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String sexKey = entity.getSexKey();
        if (sexKey != null) {
            stmt.bindString(6, sexKey);
        }
 
        String peopleId = entity.getPeopleId();
        if (peopleId != null) {
            stmt.bindString(7, peopleId);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(8, tel);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(10, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(11, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(12, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(13, rev4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactsEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String sexKey = entity.getSexKey();
        if (sexKey != null) {
            stmt.bindString(6, sexKey);
        }
 
        String peopleId = entity.getPeopleId();
        if (peopleId != null) {
            stmt.bindString(7, peopleId);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(8, tel);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(10, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(11, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(12, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(13, rev4);
        }
    }

    @Override
    protected final void attachEntity(ContactsEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ContactsEntity readEntity(Cursor cursor, int offset) {
        ContactsEntity entity = new ContactsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crimeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sexKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // peopleId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rev1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rev2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // rev3
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // rev4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCrimeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSexKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPeopleId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRev1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRev2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRev3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRev4(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ContactsEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ContactsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactsEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "releatedPeopleItem" to-many relationship of CrimeItem. */
    public List<ContactsEntity> _queryCrimeItem_ReleatedPeopleItem(String id) {
        synchronized (this) {
            if (crimeItem_ReleatedPeopleItemQuery == null) {
                QueryBuilder<ContactsEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_ReleatedPeopleItemQuery = queryBuilder.build();
            }
        }
        Query<ContactsEntity> query = crimeItem_ReleatedPeopleItemQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
