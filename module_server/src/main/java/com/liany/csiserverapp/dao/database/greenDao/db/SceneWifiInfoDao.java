package com.liany.csiserverapp.dao.database.greenDao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.liany.csiserverapp.diagnose.SceneWifiInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "wifi".
*/
public class SceneWifiInfoDao extends AbstractDao<SceneWifiInfo, String> {

    public static final String TABLENAME = "wifi";

    /**
     * Properties of entity SceneWifiInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CrimeId = new Property(1, String.class, "crimeId", false, "CRIME_ID");
        public final static Property INVERTIGATIONID = new Property(2, String.class, "INVERTIGATIONID", false, "INVERTIGATIONID");
        public final static Property CREATEUSER = new Property(3, String.class, "CREATEUSER", false, "CREATEUSER");
        public final static Property CREATEDATETIME = new Property(4, String.class, "CREATEDATETIME", false, "CREATEDATETIME");
        public final static Property COLLECTIONDATETIME = new Property(5, String.class, "COLLECTIONDATETIME", false, "COLLECTIONDATETIME");
        public final static Property LINKSPEED = new Property(6, String.class, "LINKSPEED", false, "LINKSPEED");
        public final static Property SSID = new Property(7, String.class, "SSID", false, "SSID");
        public final static Property BSSID = new Property(8, String.class, "BSSID", false, "BSSID");
        public final static Property HIDDENSSID = new Property(9, String.class, "HIDDENSSID", false, "HIDDENSSID");
        public final static Property MACADDRESS = new Property(10, String.class, "MACADDRESS", false, "MACADDRESS");
        public final static Property NETWORKLD = new Property(11, String.class, "NETWORKLD", false, "NETWORKLD");
        public final static Property RSSI = new Property(12, String.class, "RSSI", false, "RSSI");
        public final static Property SUPPLICANTSTATE = new Property(13, String.class, "SUPPLICANTSTATE", false, "SUPPLICANTSTATE");
        public final static Property DETAILEDSTATEOF = new Property(14, String.class, "DETAILEDSTATEOF", false, "DETAILEDSTATEOF");
    }

    private Query<SceneWifiInfo> crimeItem_WifiInfosQuery;

    public SceneWifiInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SceneWifiInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"wifi\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CRIME_ID\" TEXT," + // 1: crimeId
                "\"INVERTIGATIONID\" TEXT," + // 2: INVERTIGATIONID
                "\"CREATEUSER\" TEXT," + // 3: CREATEUSER
                "\"CREATEDATETIME\" TEXT," + // 4: CREATEDATETIME
                "\"COLLECTIONDATETIME\" TEXT," + // 5: COLLECTIONDATETIME
                "\"LINKSPEED\" TEXT," + // 6: LINKSPEED
                "\"SSID\" TEXT," + // 7: SSID
                "\"BSSID\" TEXT," + // 8: BSSID
                "\"HIDDENSSID\" TEXT," + // 9: HIDDENSSID
                "\"MACADDRESS\" TEXT," + // 10: MACADDRESS
                "\"NETWORKLD\" TEXT," + // 11: NETWORKLD
                "\"RSSI\" TEXT," + // 12: RSSI
                "\"SUPPLICANTSTATE\" TEXT," + // 13: SUPPLICANTSTATE
                "\"DETAILEDSTATEOF\" TEXT);"); // 14: DETAILEDSTATEOF
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"wifi\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SceneWifiInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String INVERTIGATIONID = entity.getINVERTIGATIONID();
        if (INVERTIGATIONID != null) {
            stmt.bindString(3, INVERTIGATIONID);
        }
 
        String CREATEUSER = entity.getCREATEUSER();
        if (CREATEUSER != null) {
            stmt.bindString(4, CREATEUSER);
        }
 
        String CREATEDATETIME = entity.getCREATEDATETIME();
        if (CREATEDATETIME != null) {
            stmt.bindString(5, CREATEDATETIME);
        }
 
        String COLLECTIONDATETIME = entity.getCOLLECTIONDATETIME();
        if (COLLECTIONDATETIME != null) {
            stmt.bindString(6, COLLECTIONDATETIME);
        }
 
        String LINKSPEED = entity.getLINKSPEED();
        if (LINKSPEED != null) {
            stmt.bindString(7, LINKSPEED);
        }
 
        String SSID = entity.getSSID();
        if (SSID != null) {
            stmt.bindString(8, SSID);
        }
 
        String BSSID = entity.getBSSID();
        if (BSSID != null) {
            stmt.bindString(9, BSSID);
        }
 
        String HIDDENSSID = entity.getHIDDENSSID();
        if (HIDDENSSID != null) {
            stmt.bindString(10, HIDDENSSID);
        }
 
        String MACADDRESS = entity.getMACADDRESS();
        if (MACADDRESS != null) {
            stmt.bindString(11, MACADDRESS);
        }
 
        String NETWORKLD = entity.getNETWORKLD();
        if (NETWORKLD != null) {
            stmt.bindString(12, NETWORKLD);
        }
 
        String RSSI = entity.getRSSI();
        if (RSSI != null) {
            stmt.bindString(13, RSSI);
        }
 
        String SUPPLICANTSTATE = entity.getSUPPLICANTSTATE();
        if (SUPPLICANTSTATE != null) {
            stmt.bindString(14, SUPPLICANTSTATE);
        }
 
        String DETAILEDSTATEOF = entity.getDETAILEDSTATEOF();
        if (DETAILEDSTATEOF != null) {
            stmt.bindString(15, DETAILEDSTATEOF);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SceneWifiInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String crimeId = entity.getCrimeId();
        if (crimeId != null) {
            stmt.bindString(2, crimeId);
        }
 
        String INVERTIGATIONID = entity.getINVERTIGATIONID();
        if (INVERTIGATIONID != null) {
            stmt.bindString(3, INVERTIGATIONID);
        }
 
        String CREATEUSER = entity.getCREATEUSER();
        if (CREATEUSER != null) {
            stmt.bindString(4, CREATEUSER);
        }
 
        String CREATEDATETIME = entity.getCREATEDATETIME();
        if (CREATEDATETIME != null) {
            stmt.bindString(5, CREATEDATETIME);
        }
 
        String COLLECTIONDATETIME = entity.getCOLLECTIONDATETIME();
        if (COLLECTIONDATETIME != null) {
            stmt.bindString(6, COLLECTIONDATETIME);
        }
 
        String LINKSPEED = entity.getLINKSPEED();
        if (LINKSPEED != null) {
            stmt.bindString(7, LINKSPEED);
        }
 
        String SSID = entity.getSSID();
        if (SSID != null) {
            stmt.bindString(8, SSID);
        }
 
        String BSSID = entity.getBSSID();
        if (BSSID != null) {
            stmt.bindString(9, BSSID);
        }
 
        String HIDDENSSID = entity.getHIDDENSSID();
        if (HIDDENSSID != null) {
            stmt.bindString(10, HIDDENSSID);
        }
 
        String MACADDRESS = entity.getMACADDRESS();
        if (MACADDRESS != null) {
            stmt.bindString(11, MACADDRESS);
        }
 
        String NETWORKLD = entity.getNETWORKLD();
        if (NETWORKLD != null) {
            stmt.bindString(12, NETWORKLD);
        }
 
        String RSSI = entity.getRSSI();
        if (RSSI != null) {
            stmt.bindString(13, RSSI);
        }
 
        String SUPPLICANTSTATE = entity.getSUPPLICANTSTATE();
        if (SUPPLICANTSTATE != null) {
            stmt.bindString(14, SUPPLICANTSTATE);
        }
 
        String DETAILEDSTATEOF = entity.getDETAILEDSTATEOF();
        if (DETAILEDSTATEOF != null) {
            stmt.bindString(15, DETAILEDSTATEOF);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SceneWifiInfo readEntity(Cursor cursor, int offset) {
        SceneWifiInfo entity = new SceneWifiInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crimeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // INVERTIGATIONID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CREATEUSER
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CREATEDATETIME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // COLLECTIONDATETIME
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // LINKSPEED
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SSID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // BSSID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // HIDDENSSID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // MACADDRESS
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // NETWORKLD
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // RSSI
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // SUPPLICANTSTATE
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // DETAILEDSTATEOF
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SceneWifiInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCrimeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setINVERTIGATIONID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCREATEUSER(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCREATEDATETIME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCOLLECTIONDATETIME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLINKSPEED(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSSID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBSSID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHIDDENSSID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMACADDRESS(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNETWORKLD(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRSSI(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSUPPLICANTSTATE(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDETAILEDSTATEOF(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SceneWifiInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SceneWifiInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SceneWifiInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "wifiInfos" to-many relationship of CrimeItem. */
    public List<SceneWifiInfo> _queryCrimeItem_WifiInfos(String id) {
        synchronized (this) {
            if (crimeItem_WifiInfosQuery == null) {
                QueryBuilder<SceneWifiInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                crimeItem_WifiInfosQuery = queryBuilder.build();
            }
        }
        Query<SceneWifiInfo> query = crimeItem_WifiInfosQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
