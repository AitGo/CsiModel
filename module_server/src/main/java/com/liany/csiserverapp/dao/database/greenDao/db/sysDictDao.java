package com.liany.csiserverapp.dao.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liany.csiserverapp.diagnose.sysDict;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_DICT".
*/
public class sysDictDao extends AbstractDao<sysDict, String> {

    public static final String TABLENAME = "SYS_DICT";

    /**
     * Properties of entity sysDict.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property DictLevel = new Property(1, String.class, "dictLevel", false, "dictLevel");
        public final static Property DictKey = new Property(2, String.class, "dictKey", false, "dictKey");
        public final static Property ParentKey = new Property(3, String.class, "parentKey", false, "parentKey");
        public final static Property RootKey = new Property(4, String.class, "rootKey", false, "rootKey");
        public final static Property DictValue = new Property(5, String.class, "dictValue", false, "dictValue");
        public final static Property DictPy = new Property(6, String.class, "dictPy", false, "dictPy");
        public final static Property Remark = new Property(7, String.class, "remark", false, "remark");
    }


    public sysDictDao(DaoConfig config) {
        super(config);
    }
    
    public sysDictDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_DICT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"dictLevel\" TEXT," + // 1: dictLevel
                "\"dictKey\" TEXT," + // 2: dictKey
                "\"parentKey\" TEXT," + // 3: parentKey
                "\"rootKey\" TEXT," + // 4: rootKey
                "\"dictValue\" TEXT," + // 5: dictValue
                "\"dictPy\" TEXT," + // 6: dictPy
                "\"remark\" TEXT);"); // 7: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_DICT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, sysDict entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String dictLevel = entity.getDictLevel();
        if (dictLevel != null) {
            stmt.bindString(2, dictLevel);
        }
 
        String dictKey = entity.getDictKey();
        if (dictKey != null) {
            stmt.bindString(3, dictKey);
        }
 
        String parentKey = entity.getParentKey();
        if (parentKey != null) {
            stmt.bindString(4, parentKey);
        }
 
        String rootKey = entity.getRootKey();
        if (rootKey != null) {
            stmt.bindString(5, rootKey);
        }
 
        String dictValue = entity.getDictValue();
        if (dictValue != null) {
            stmt.bindString(6, dictValue);
        }
 
        String dictPy = entity.getDictPy();
        if (dictPy != null) {
            stmt.bindString(7, dictPy);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, sysDict entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String dictLevel = entity.getDictLevel();
        if (dictLevel != null) {
            stmt.bindString(2, dictLevel);
        }
 
        String dictKey = entity.getDictKey();
        if (dictKey != null) {
            stmt.bindString(3, dictKey);
        }
 
        String parentKey = entity.getParentKey();
        if (parentKey != null) {
            stmt.bindString(4, parentKey);
        }
 
        String rootKey = entity.getRootKey();
        if (rootKey != null) {
            stmt.bindString(5, rootKey);
        }
 
        String dictValue = entity.getDictValue();
        if (dictValue != null) {
            stmt.bindString(6, dictValue);
        }
 
        String dictPy = entity.getDictPy();
        if (dictPy != null) {
            stmt.bindString(7, dictPy);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public sysDict readEntity(Cursor cursor, int offset) {
        sysDict entity = new sysDict( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dictLevel
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dictKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parentKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rootKey
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dictValue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dictPy
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, sysDict entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDictLevel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDictKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParentKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRootKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDictValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDictPy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(sysDict entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(sysDict entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(sysDict entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
